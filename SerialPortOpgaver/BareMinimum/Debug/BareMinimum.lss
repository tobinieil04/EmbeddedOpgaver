
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000e76  00000f0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800214  00800214  00000f1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000080dc  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001da8  00000000  00000000  0000932c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001964  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000808  00000000  00000000  0000ca38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002327  00000000  00000000  0000d240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c59  00000000  00000000  0000f567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  000121c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
   2:	00 00       	nop
   4:	33 c1       	rjmp	.+614    	; 0x26c <__bad_interrupt>
   6:	00 00       	nop
   8:	31 c1       	rjmp	.+610    	; 0x26c <__bad_interrupt>
   a:	00 00       	nop
   c:	2f c1       	rjmp	.+606    	; 0x26c <__bad_interrupt>
   e:	00 00       	nop
  10:	2d c1       	rjmp	.+602    	; 0x26c <__bad_interrupt>
  12:	00 00       	nop
  14:	2b c1       	rjmp	.+598    	; 0x26c <__bad_interrupt>
  16:	00 00       	nop
  18:	29 c1       	rjmp	.+594    	; 0x26c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	27 c1       	rjmp	.+590    	; 0x26c <__bad_interrupt>
  1e:	00 00       	nop
  20:	25 c1       	rjmp	.+586    	; 0x26c <__bad_interrupt>
  22:	00 00       	nop
  24:	23 c1       	rjmp	.+582    	; 0x26c <__bad_interrupt>
  26:	00 00       	nop
  28:	21 c1       	rjmp	.+578    	; 0x26c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1f c1       	rjmp	.+574    	; 0x26c <__bad_interrupt>
  2e:	00 00       	nop
  30:	1d c1       	rjmp	.+570    	; 0x26c <__bad_interrupt>
  32:	00 00       	nop
  34:	1b c1       	rjmp	.+566    	; 0x26c <__bad_interrupt>
  36:	00 00       	nop
  38:	19 c1       	rjmp	.+562    	; 0x26c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	17 c1       	rjmp	.+558    	; 0x26c <__bad_interrupt>
  3e:	00 00       	nop
  40:	15 c1       	rjmp	.+554    	; 0x26c <__bad_interrupt>
  42:	00 00       	nop
  44:	13 c1       	rjmp	.+550    	; 0x26c <__bad_interrupt>
  46:	00 00       	nop
  48:	11 c1       	rjmp	.+546    	; 0x26c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0f c1       	rjmp	.+542    	; 0x26c <__bad_interrupt>
  4e:	00 00       	nop
  50:	0d c1       	rjmp	.+538    	; 0x26c <__bad_interrupt>
  52:	00 00       	nop
  54:	0b c1       	rjmp	.+534    	; 0x26c <__bad_interrupt>
  56:	00 00       	nop
  58:	09 c1       	rjmp	.+530    	; 0x26c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	16 c5       	rjmp	.+2604   	; 0xa8a <__vector_23>
  5e:	00 00       	nop
  60:	05 c1       	rjmp	.+522    	; 0x26c <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c4       	rjmp	.+2192   	; 0x8f6 <__vector_25>
  66:	00 00       	nop
  68:	7c c4       	rjmp	.+2296   	; 0x962 <__vector_26>
  6a:	00 00       	nop
  6c:	ff c0       	rjmp	.+510    	; 0x26c <__bad_interrupt>
  6e:	00 00       	nop
  70:	fd c0       	rjmp	.+506    	; 0x26c <__bad_interrupt>
  72:	00 00       	nop
  74:	fb c0       	rjmp	.+502    	; 0x26c <__bad_interrupt>
  76:	00 00       	nop
  78:	f9 c0       	rjmp	.+498    	; 0x26c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	f7 c0       	rjmp	.+494    	; 0x26c <__bad_interrupt>
  7e:	00 00       	nop
  80:	f5 c0       	rjmp	.+490    	; 0x26c <__bad_interrupt>
  82:	00 00       	nop
  84:	f3 c0       	rjmp	.+486    	; 0x26c <__bad_interrupt>
  86:	00 00       	nop
  88:	f1 c0       	rjmp	.+482    	; 0x26c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ef c0       	rjmp	.+478    	; 0x26c <__bad_interrupt>
  8e:	00 00       	nop
  90:	ed c0       	rjmp	.+474    	; 0x26c <__bad_interrupt>
  92:	00 00       	nop
  94:	eb c0       	rjmp	.+470    	; 0x26c <__bad_interrupt>
  96:	00 00       	nop
  98:	e9 c0       	rjmp	.+466    	; 0x26c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	e7 c0       	rjmp	.+462    	; 0x26c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	e5 c0       	rjmp	.+458    	; 0x26c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e3 c0       	rjmp	.+454    	; 0x26c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e1 c0       	rjmp	.+450    	; 0x26c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	df c0       	rjmp	.+446    	; 0x26c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	dd c0       	rjmp	.+442    	; 0x26c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	db c0       	rjmp	.+438    	; 0x26c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	d9 c0       	rjmp	.+434    	; 0x26c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	d7 c0       	rjmp	.+430    	; 0x26c <__bad_interrupt>
  be:	00 00       	nop
  c0:	d5 c0       	rjmp	.+426    	; 0x26c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	d3 c0       	rjmp	.+422    	; 0x26c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d1 c0       	rjmp	.+418    	; 0x26c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	cf c0       	rjmp	.+414    	; 0x26c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	cd c0       	rjmp	.+410    	; 0x26c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	cb c0       	rjmp	.+406    	; 0x26c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	c9 c0       	rjmp	.+402    	; 0x26c <__bad_interrupt>
  da:	00 00       	nop
  dc:	c7 c0       	rjmp	.+398    	; 0x26c <__bad_interrupt>
  de:	00 00       	nop
  e0:	c5 c0       	rjmp	.+394    	; 0x26c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	69 06       	cpc	r6, r25
  e6:	6c 06       	cpc	r6, r28
  e8:	5b 06       	cpc	r5, r27
  ea:	5f 06       	cpc	r5, r31
  ec:	65 06       	cpc	r6, r21
  ee:	a3 06       	cpc	r10, r19
  f0:	70 06       	cpc	r7, r16
  f2:	74 06       	cpc	r7, r20
  f4:	7a 06       	cpc	r7, r26
  f6:	7e 06       	cpc	r7, r30
  f8:	82 06       	cpc	r8, r18
  fa:	88 06       	cpc	r8, r24
  fc:	8c 06       	cpc	r8, r28
  fe:	90 06       	cpc	r9, r16
 100:	a3 06       	cpc	r10, r19
 102:	96 06       	cpc	r9, r22
 104:	9a 06       	cpc	r9, r26
 106:	9e 06       	cpc	r9, r30

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
 20e:	e3 04       	cpc	r14, r3

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d1 e2       	ldi	r29, 0x21	; 33
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	0c bf       	out	0x3c, r16	; 60

00000220 <__do_copy_data>:
 220:	12 e0       	ldi	r17, 0x02	; 2
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b2 e0       	ldi	r27, 0x02	; 2
 226:	e6 e7       	ldi	r30, 0x76	; 118
 228:	fe e0       	ldi	r31, 0x0E	; 14
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	0b bf       	out	0x3b, r16	; 59
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x14>
 230:	07 90       	elpm	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	a4 31       	cpi	r26, 0x14	; 20
 236:	b1 07       	cpc	r27, r17
 238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0x10>

0000023a <__do_clear_bss>:
 23a:	22 e0       	ldi	r18, 0x02	; 2
 23c:	a4 e1       	ldi	r26, 0x14	; 20
 23e:	b2 e0       	ldi	r27, 0x02	; 2
 240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
 242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
 244:	ac 3b       	cpi	r26, 0xBC	; 188
 246:	b2 07       	cpc	r27, r18
 248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>

0000024a <__do_global_ctors>:
 24a:	11 e0       	ldi	r17, 0x01	; 1
 24c:	c8 e0       	ldi	r28, 0x08	; 8
 24e:	d1 e0       	ldi	r29, 0x01	; 1
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	05 c0       	rjmp	.+10     	; 0x25e <__do_global_ctors+0x14>
 254:	21 97       	sbiw	r28, 0x01	; 1
 256:	01 09       	sbc	r16, r1
 258:	80 2f       	mov	r24, r16
 25a:	fe 01       	movw	r30, r28
 25c:	02 d6       	rcall	.+3076   	; 0xe62 <__tablejump2__>
 25e:	c7 30       	cpi	r28, 0x07	; 7
 260:	d1 07       	cpc	r29, r17
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 07       	cpc	r16, r24
 266:	b1 f7       	brne	.-20     	; 0x254 <__do_global_ctors+0xa>
 268:	dc d3       	rcall	.+1976   	; 0xa22 <main>
 26a:	03 c6       	rjmp	.+3078   	; 0xe72 <_exit>

0000026c <__bad_interrupt>:
 26c:	c9 ce       	rjmp	.-622    	; 0x0 <__vectors>

0000026e <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <_ZN14HardwareSerial5beginEm+0x6>
 274:	00 d0       	rcall	.+0      	; 0x276 <_ZN14HardwareSerial5beginEm+0x8>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	9a 83       	std	Y+2, r25	; 0x02
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	4b 83       	std	Y+3, r20	; 0x03
 280:	5c 83       	std	Y+4, r21	; 0x04
 282:	6d 83       	std	Y+5, r22	; 0x05
 284:	7e 83       	std	Y+6, r23	; 0x06
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	9c 81       	ldd	r25, Y+4	; 0x04
 28a:	ad 81       	ldd	r26, Y+5	; 0x05
 28c:	be 81       	ldd	r27, Y+6	; 0x06
 28e:	e9 81       	ldd	r30, Y+1	; 0x01
 290:	fa 81       	ldd	r31, Y+2	; 0x02
 292:	26 e0       	ldi	r18, 0x06	; 6
 294:	ac 01       	movw	r20, r24
 296:	bd 01       	movw	r22, r26
 298:	cf 01       	movw	r24, r30
 29a:	ca d2       	rcall	.+1428   	; 0x830 <_ZN14HardwareSerial5beginEmh>
 29c:	00 00       	nop
 29e:	26 96       	adiw	r28, 0x06	; 6
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	1f 92       	push	r1
 2b6:	1f 92       	push	r1
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <setup>:

int led = 11;
int incommingNum = 0;

void setup()
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	while(!Serial); // Wait until serial port's open on Leonardo and SAMD boards
 2d4:	86 e1       	ldi	r24, 0x16	; 22
 2d6:	92 e0       	ldi	r25, 0x02	; 2
 2d8:	eb df       	rcall	.-42     	; 0x2b0 <_ZN14HardwareSerialcvbEv>
 2da:	98 2f       	mov	r25, r24
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	89 27       	eor	r24, r25
 2e0:	88 23       	and	r24, r24
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <setup+0x1a>
 2e4:	f7 cf       	rjmp	.-18     	; 0x2d4 <setup+0x8>
	Serial.begin(115200);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	52 ec       	ldi	r21, 0xC2	; 194
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	86 e1       	ldi	r24, 0x16	; 22
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	bd df       	rcall	.-134    	; 0x26e <_ZN14HardwareSerial5beginEm>
	pinMode(led, OUTPUT);
 2f4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2f8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	24 d5       	rcall	.+2632   	; 0xd48 <pinMode>
	
}
 300:	00 00       	nop
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <loop>:

void loop()
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	00 d0       	rcall	.+0      	; 0x30e <loop+0x6>
 30e:	1f 92       	push	r1
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
	
	double del = (incommingNum - 48) * 0.1 * 1000;
 314:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 318:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 31c:	c0 97       	sbiw	r24, 0x30	; 48
 31e:	09 2e       	mov	r0, r25
 320:	00 0c       	add	r0, r0
 322:	aa 0b       	sbc	r26, r26
 324:	bb 0b       	sbc	r27, r27
 326:	bc 01       	movw	r22, r24
 328:	cd 01       	movw	r24, r26
 32a:	8c d0       	rcall	.+280    	; 0x444 <__floatsisf>
 32c:	dc 01       	movw	r26, r24
 32e:	cb 01       	movw	r24, r22
 330:	2d ec       	ldi	r18, 0xCD	; 205
 332:	3c ec       	ldi	r19, 0xCC	; 204
 334:	4c ec       	ldi	r20, 0xCC	; 204
 336:	5d e3       	ldi	r21, 0x3D	; 61
 338:	bc 01       	movw	r22, r24
 33a:	cd 01       	movw	r24, r26
 33c:	e7 d0       	rcall	.+462    	; 0x50c <__mulsf3>
 33e:	dc 01       	movw	r26, r24
 340:	cb 01       	movw	r24, r22
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	4a e7       	ldi	r20, 0x7A	; 122
 348:	54 e4       	ldi	r21, 0x44	; 68
 34a:	bc 01       	movw	r22, r24
 34c:	cd 01       	movw	r24, r26
 34e:	de d0       	rcall	.+444    	; 0x50c <__mulsf3>
 350:	dc 01       	movw	r26, r24
 352:	cb 01       	movw	r24, r22
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	9a 83       	std	Y+2, r25	; 0x02
 358:	ab 83       	std	Y+3, r26	; 0x03
 35a:	bc 83       	std	Y+4, r27	; 0x04
	digitalWrite(led, HIGH);
 35c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 360:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	2c d5       	rcall	.+2648   	; 0xdc0 <digitalWrite>
	delay(del);
 368:	69 81       	ldd	r22, Y+1	; 0x01
 36a:	7a 81       	ldd	r23, Y+2	; 0x02
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	9c 81       	ldd	r25, Y+4	; 0x04
 370:	3b d0       	rcall	.+118    	; 0x3e8 <__fixunssfsi>
 372:	dc 01       	movw	r26, r24
 374:	cb 01       	movw	r24, r22
 376:	bc 01       	movw	r22, r24
 378:	cd 01       	movw	r24, r26
 37a:	f6 d3       	rcall	.+2028   	; 0xb68 <delay>
	digitalWrite(led, LOW);
 37c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 380:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	1c d5       	rcall	.+2616   	; 0xdc0 <digitalWrite>
	delay(del);
 388:	69 81       	ldd	r22, Y+1	; 0x01
 38a:	7a 81       	ldd	r23, Y+2	; 0x02
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	9c 81       	ldd	r25, Y+4	; 0x04
 390:	2b d0       	rcall	.+86     	; 0x3e8 <__fixunssfsi>
 392:	dc 01       	movw	r26, r24
 394:	cb 01       	movw	r24, r22
 396:	bc 01       	movw	r22, r24
 398:	cd 01       	movw	r24, r26
 39a:	e6 d3       	rcall	.+1996   	; 0xb68 <delay>
 39c:	00 00       	nop
	
}
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <_Z11serialEventv>:
 3ac:	cf 93       	push	r28

void serialEvent() 
{
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
	incommingNum = Serial.read();
 3b4:	86 e1       	ldi	r24, 0x16	; 22
 3b6:	92 e0       	ldi	r25, 0x02	; 2
 3b8:	4e d1       	rcall	.+668    	; 0x656 <_ZN14HardwareSerial4readEv>
 3ba:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 3be:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
	if(incommingNum > 9 || incommingNum < 0)
 3c2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 3c6:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 3ca:	0a 97       	sbiw	r24, 0x0a	; 10
 3cc:	34 f4       	brge	.+12     	; 0x3da <_Z11serialEventv+0x2e>
 3ce:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 3d2:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 3d6:	99 23       	and	r25, r25
 3d8:	1c f4       	brge	.+6      	; 0x3e0 <_Z11serialEventv+0x34>
	{
		exit(0);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	49 d5       	rcall	.+2706   	; 0xe72 <_exit>
	}
	else
	{
		
	}
 3e0:	00 00       	nop
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <__fixunssfsi>:
 3e8:	70 d0       	rcall	.+224    	; 0x4ca <__fp_splitA>
 3ea:	88 f0       	brcs	.+34     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ec:	9f 57       	subi	r25, 0x7F	; 127
 3ee:	90 f0       	brcs	.+36     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f0:	b9 2f       	mov	r27, r25
 3f2:	99 27       	eor	r25, r25
 3f4:	b7 51       	subi	r27, 0x17	; 23
 3f6:	a0 f0       	brcs	.+40     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f8:	d1 f0       	breq	.+52     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	1a f0       	brmi	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	ba 95       	dec	r27
 406:	c9 f7       	brne	.-14     	; 0x3fa <__fixunssfsi+0x12>
 408:	12 c0       	rjmp	.+36     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40a:	b1 30       	cpi	r27, 0x01	; 1
 40c:	81 f0       	breq	.+32     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40e:	77 d0       	rcall	.+238    	; 0x4fe <__fp_zero>
 410:	b1 e0       	ldi	r27, 0x01	; 1
 412:	08 95       	ret
 414:	74 c0       	rjmp	.+232    	; 0x4fe <__fp_zero>
 416:	67 2f       	mov	r22, r23
 418:	78 2f       	mov	r23, r24
 41a:	88 27       	eor	r24, r24
 41c:	b8 5f       	subi	r27, 0xF8	; 248
 41e:	39 f0       	breq	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	b9 3f       	cpi	r27, 0xF9	; 249
 422:	cc f3       	brlt	.-14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 424:	86 95       	lsr	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b3 95       	inc	r27
 42c:	d9 f7       	brne	.-10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42e:	3e f4       	brtc	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 430:	90 95       	com	r25
 432:	80 95       	com	r24
 434:	70 95       	com	r23
 436:	61 95       	neg	r22
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	8f 4f       	sbci	r24, 0xFF	; 255
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <__floatunsisf>:
 440:	e8 94       	clt
 442:	09 c0       	rjmp	.+18     	; 0x456 <__floatsisf+0x12>

00000444 <__floatsisf>:
 444:	97 fb       	bst	r25, 7
 446:	3e f4       	brtc	.+14     	; 0x456 <__floatsisf+0x12>
 448:	90 95       	com	r25
 44a:	80 95       	com	r24
 44c:	70 95       	com	r23
 44e:	61 95       	neg	r22
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f 4f       	sbci	r24, 0xFF	; 255
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	99 23       	and	r25, r25
 458:	a9 f0       	breq	.+42     	; 0x484 <__floatsisf+0x40>
 45a:	f9 2f       	mov	r31, r25
 45c:	96 e9       	ldi	r25, 0x96	; 150
 45e:	bb 27       	eor	r27, r27
 460:	93 95       	inc	r25
 462:	f6 95       	lsr	r31
 464:	87 95       	ror	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f1 11       	cpse	r31, r1
 46e:	f8 cf       	rjmp	.-16     	; 0x460 <__floatsisf+0x1c>
 470:	fa f4       	brpl	.+62     	; 0x4b0 <__floatsisf+0x6c>
 472:	bb 0f       	add	r27, r27
 474:	11 f4       	brne	.+4      	; 0x47a <__floatsisf+0x36>
 476:	60 ff       	sbrs	r22, 0
 478:	1b c0       	rjmp	.+54     	; 0x4b0 <__floatsisf+0x6c>
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	8f 4f       	sbci	r24, 0xFF	; 255
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	16 c0       	rjmp	.+44     	; 0x4b0 <__floatsisf+0x6c>
 484:	88 23       	and	r24, r24
 486:	11 f0       	breq	.+4      	; 0x48c <__floatsisf+0x48>
 488:	96 e9       	ldi	r25, 0x96	; 150
 48a:	11 c0       	rjmp	.+34     	; 0x4ae <__floatsisf+0x6a>
 48c:	77 23       	and	r23, r23
 48e:	21 f0       	breq	.+8      	; 0x498 <__floatsisf+0x54>
 490:	9e e8       	ldi	r25, 0x8E	; 142
 492:	87 2f       	mov	r24, r23
 494:	76 2f       	mov	r23, r22
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__floatsisf+0x5e>
 498:	66 23       	and	r22, r22
 49a:	71 f0       	breq	.+28     	; 0x4b8 <__floatsisf+0x74>
 49c:	96 e8       	ldi	r25, 0x86	; 134
 49e:	86 2f       	mov	r24, r22
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	2a f0       	brmi	.+10     	; 0x4b0 <__floatsisf+0x6c>
 4a6:	9a 95       	dec	r25
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	da f7       	brpl	.-10     	; 0x4a6 <__floatsisf+0x62>
 4b0:	88 0f       	add	r24, r24
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	97 f9       	bld	r25, 7
 4b8:	08 95       	ret

000004ba <__fp_split3>:
 4ba:	57 fd       	sbrc	r21, 7
 4bc:	90 58       	subi	r25, 0x80	; 128
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	59 f0       	breq	.+22     	; 0x4da <__fp_splitA+0x10>
 4c4:	5f 3f       	cpi	r21, 0xFF	; 255
 4c6:	71 f0       	breq	.+28     	; 0x4e4 <__fp_splitA+0x1a>
 4c8:	47 95       	ror	r20

000004ca <__fp_splitA>:
 4ca:	88 0f       	add	r24, r24
 4cc:	97 fb       	bst	r25, 7
 4ce:	99 1f       	adc	r25, r25
 4d0:	61 f0       	breq	.+24     	; 0x4ea <__fp_splitA+0x20>
 4d2:	9f 3f       	cpi	r25, 0xFF	; 255
 4d4:	79 f0       	breq	.+30     	; 0x4f4 <__fp_splitA+0x2a>
 4d6:	87 95       	ror	r24
 4d8:	08 95       	ret
 4da:	12 16       	cp	r1, r18
 4dc:	13 06       	cpc	r1, r19
 4de:	14 06       	cpc	r1, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	f2 cf       	rjmp	.-28     	; 0x4c8 <__fp_split3+0xe>
 4e4:	46 95       	lsr	r20
 4e6:	f1 df       	rcall	.-30     	; 0x4ca <__fp_splitA>
 4e8:	08 c0       	rjmp	.+16     	; 0x4fa <__fp_splitA+0x30>
 4ea:	16 16       	cp	r1, r22
 4ec:	17 06       	cpc	r1, r23
 4ee:	18 06       	cpc	r1, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	f1 cf       	rjmp	.-30     	; 0x4d6 <__fp_splitA+0xc>
 4f4:	86 95       	lsr	r24
 4f6:	71 05       	cpc	r23, r1
 4f8:	61 05       	cpc	r22, r1
 4fa:	08 94       	sec
 4fc:	08 95       	ret

000004fe <__fp_zero>:
 4fe:	e8 94       	clt

00000500 <__fp_szero>:
 500:	bb 27       	eor	r27, r27
 502:	66 27       	eor	r22, r22
 504:	77 27       	eor	r23, r23
 506:	cb 01       	movw	r24, r22
 508:	97 f9       	bld	r25, 7
 50a:	08 95       	ret

0000050c <__mulsf3>:
 50c:	0b d0       	rcall	.+22     	; 0x524 <__mulsf3x>
 50e:	78 c0       	rjmp	.+240    	; 0x600 <__fp_round>
 510:	69 d0       	rcall	.+210    	; 0x5e4 <__fp_pscA>
 512:	28 f0       	brcs	.+10     	; 0x51e <__mulsf3+0x12>
 514:	6e d0       	rcall	.+220    	; 0x5f2 <__fp_pscB>
 516:	18 f0       	brcs	.+6      	; 0x51e <__mulsf3+0x12>
 518:	95 23       	and	r25, r21
 51a:	09 f0       	breq	.+2      	; 0x51e <__mulsf3+0x12>
 51c:	5a c0       	rjmp	.+180    	; 0x5d2 <__fp_inf>
 51e:	5f c0       	rjmp	.+190    	; 0x5de <__fp_nan>
 520:	11 24       	eor	r1, r1
 522:	ee cf       	rjmp	.-36     	; 0x500 <__fp_szero>

00000524 <__mulsf3x>:
 524:	ca df       	rcall	.-108    	; 0x4ba <__fp_split3>
 526:	a0 f3       	brcs	.-24     	; 0x510 <__mulsf3+0x4>

00000528 <__mulsf3_pse>:
 528:	95 9f       	mul	r25, r21
 52a:	d1 f3       	breq	.-12     	; 0x520 <__mulsf3+0x14>
 52c:	95 0f       	add	r25, r21
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	55 1f       	adc	r21, r21
 532:	62 9f       	mul	r22, r18
 534:	f0 01       	movw	r30, r0
 536:	72 9f       	mul	r23, r18
 538:	bb 27       	eor	r27, r27
 53a:	f0 0d       	add	r31, r0
 53c:	b1 1d       	adc	r27, r1
 53e:	63 9f       	mul	r22, r19
 540:	aa 27       	eor	r26, r26
 542:	f0 0d       	add	r31, r0
 544:	b1 1d       	adc	r27, r1
 546:	aa 1f       	adc	r26, r26
 548:	64 9f       	mul	r22, r20
 54a:	66 27       	eor	r22, r22
 54c:	b0 0d       	add	r27, r0
 54e:	a1 1d       	adc	r26, r1
 550:	66 1f       	adc	r22, r22
 552:	82 9f       	mul	r24, r18
 554:	22 27       	eor	r18, r18
 556:	b0 0d       	add	r27, r0
 558:	a1 1d       	adc	r26, r1
 55a:	62 1f       	adc	r22, r18
 55c:	73 9f       	mul	r23, r19
 55e:	b0 0d       	add	r27, r0
 560:	a1 1d       	adc	r26, r1
 562:	62 1f       	adc	r22, r18
 564:	83 9f       	mul	r24, r19
 566:	a0 0d       	add	r26, r0
 568:	61 1d       	adc	r22, r1
 56a:	22 1f       	adc	r18, r18
 56c:	74 9f       	mul	r23, r20
 56e:	33 27       	eor	r19, r19
 570:	a0 0d       	add	r26, r0
 572:	61 1d       	adc	r22, r1
 574:	23 1f       	adc	r18, r19
 576:	84 9f       	mul	r24, r20
 578:	60 0d       	add	r22, r0
 57a:	21 1d       	adc	r18, r1
 57c:	82 2f       	mov	r24, r18
 57e:	76 2f       	mov	r23, r22
 580:	6a 2f       	mov	r22, r26
 582:	11 24       	eor	r1, r1
 584:	9f 57       	subi	r25, 0x7F	; 127
 586:	50 40       	sbci	r21, 0x00	; 0
 588:	8a f0       	brmi	.+34     	; 0x5ac <__mulsf3_pse+0x84>
 58a:	e1 f0       	breq	.+56     	; 0x5c4 <__mulsf3_pse+0x9c>
 58c:	88 23       	and	r24, r24
 58e:	4a f0       	brmi	.+18     	; 0x5a2 <__mulsf3_pse+0x7a>
 590:	ee 0f       	add	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	bb 1f       	adc	r27, r27
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	91 50       	subi	r25, 0x01	; 1
 59e:	50 40       	sbci	r21, 0x00	; 0
 5a0:	a9 f7       	brne	.-22     	; 0x58c <__mulsf3_pse+0x64>
 5a2:	9e 3f       	cpi	r25, 0xFE	; 254
 5a4:	51 05       	cpc	r21, r1
 5a6:	70 f0       	brcs	.+28     	; 0x5c4 <__mulsf3_pse+0x9c>
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <__fp_inf>
 5aa:	aa cf       	rjmp	.-172    	; 0x500 <__fp_szero>
 5ac:	5f 3f       	cpi	r21, 0xFF	; 255
 5ae:	ec f3       	brlt	.-6      	; 0x5aa <__mulsf3_pse+0x82>
 5b0:	98 3e       	cpi	r25, 0xE8	; 232
 5b2:	dc f3       	brlt	.-10     	; 0x5aa <__mulsf3_pse+0x82>
 5b4:	86 95       	lsr	r24
 5b6:	77 95       	ror	r23
 5b8:	67 95       	ror	r22
 5ba:	b7 95       	ror	r27
 5bc:	f7 95       	ror	r31
 5be:	e7 95       	ror	r30
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	c1 f7       	brne	.-16     	; 0x5b4 <__mulsf3_pse+0x8c>
 5c4:	fe 2b       	or	r31, r30
 5c6:	88 0f       	add	r24, r24
 5c8:	91 1d       	adc	r25, r1
 5ca:	96 95       	lsr	r25
 5cc:	87 95       	ror	r24
 5ce:	97 f9       	bld	r25, 7
 5d0:	08 95       	ret

000005d2 <__fp_inf>:
 5d2:	97 f9       	bld	r25, 7
 5d4:	9f 67       	ori	r25, 0x7F	; 127
 5d6:	80 e8       	ldi	r24, 0x80	; 128
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	08 95       	ret

000005de <__fp_nan>:
 5de:	9f ef       	ldi	r25, 0xFF	; 255
 5e0:	80 ec       	ldi	r24, 0xC0	; 192
 5e2:	08 95       	ret

000005e4 <__fp_pscA>:
 5e4:	00 24       	eor	r0, r0
 5e6:	0a 94       	dec	r0
 5e8:	16 16       	cp	r1, r22
 5ea:	17 06       	cpc	r1, r23
 5ec:	18 06       	cpc	r1, r24
 5ee:	09 06       	cpc	r0, r25
 5f0:	08 95       	ret

000005f2 <__fp_pscB>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	12 16       	cp	r1, r18
 5f8:	13 06       	cpc	r1, r19
 5fa:	14 06       	cpc	r1, r20
 5fc:	05 06       	cpc	r0, r21
 5fe:	08 95       	ret

00000600 <__fp_round>:
 600:	09 2e       	mov	r0, r25
 602:	03 94       	inc	r0
 604:	00 0c       	add	r0, r0
 606:	11 f4       	brne	.+4      	; 0x60c <__fp_round+0xc>
 608:	88 23       	and	r24, r24
 60a:	52 f0       	brmi	.+20     	; 0x620 <__fp_round+0x20>
 60c:	bb 0f       	add	r27, r27
 60e:	40 f4       	brcc	.+16     	; 0x620 <__fp_round+0x20>
 610:	bf 2b       	or	r27, r31
 612:	11 f4       	brne	.+4      	; 0x618 <__fp_round+0x18>
 614:	60 ff       	sbrs	r22, 0
 616:	04 c0       	rjmp	.+8      	; 0x620 <__fp_round+0x20>
 618:	6f 5f       	subi	r22, 0xFF	; 255
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	08 95       	ret

00000622 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 622:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 624:	91 8d       	ldd	r25, Z+25	; 0x19
 626:	22 8d       	ldd	r18, Z+26	; 0x1a
 628:	89 2f       	mov	r24, r25
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	80 5c       	subi	r24, 0xC0	; 192
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	82 1b       	sub	r24, r18
 632:	91 09       	sbc	r25, r1
}
 634:	8f 73       	andi	r24, 0x3F	; 63
 636:	99 27       	eor	r25, r25
 638:	08 95       	ret

0000063a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 63a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 63c:	91 8d       	ldd	r25, Z+25	; 0x19
 63e:	82 8d       	ldd	r24, Z+26	; 0x1a
 640:	98 17       	cp	r25, r24
 642:	31 f0       	breq	.+12     	; 0x650 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 644:	82 8d       	ldd	r24, Z+26	; 0x1a
 646:	e8 0f       	add	r30, r24
 648:	f1 1d       	adc	r31, r1
 64a:	85 8d       	ldd	r24, Z+29	; 0x1d
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 654:	08 95       	ret

00000656 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 656:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 658:	91 8d       	ldd	r25, Z+25	; 0x19
 65a:	82 8d       	ldd	r24, Z+26	; 0x1a
 65c:	98 17       	cp	r25, r24
 65e:	61 f0       	breq	.+24     	; 0x678 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 660:	82 8d       	ldd	r24, Z+26	; 0x1a
 662:	df 01       	movw	r26, r30
 664:	a8 0f       	add	r26, r24
 666:	b1 1d       	adc	r27, r1
 668:	5d 96       	adiw	r26, 0x1d	; 29
 66a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 66c:	92 8d       	ldd	r25, Z+26	; 0x1a
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	9f 73       	andi	r25, 0x3F	; 63
 672:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 67c:	08 95       	ret

0000067e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 67e:	fc 01       	movw	r30, r24
 680:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 682:	44 8d       	ldd	r20, Z+28	; 0x1c
 684:	25 2f       	mov	r18, r21
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	84 2f       	mov	r24, r20
 68a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 68c:	82 1b       	sub	r24, r18
 68e:	93 0b       	sbc	r25, r19
 690:	54 17       	cp	r21, r20
 692:	10 f0       	brcs	.+4      	; 0x698 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 694:	cf 96       	adiw	r24, 0x3f	; 63
 696:	08 95       	ret
  return tail - head - 1;
 698:	01 97       	sbiw	r24, 0x01	; 1
}
 69a:	08 95       	ret

0000069c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 69c:	8a ed       	ldi	r24, 0xDA	; 218
 69e:	94 e0       	ldi	r25, 0x04	; 4
 6a0:	89 2b       	or	r24, r25
 6a2:	39 f0       	breq	.+14     	; 0x6b2 <_Z14serialEventRunv+0x16>
 6a4:	86 ed       	ldi	r24, 0xD6	; 214
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	89 2b       	or	r24, r25
 6aa:	19 f0       	breq	.+6      	; 0x6b2 <_Z14serialEventRunv+0x16>
 6ac:	83 d1       	rcall	.+774    	; 0x9b4 <_Z17Serial0_availablev>
 6ae:	81 11       	cpse	r24, r1
 6b0:	25 c0       	rjmp	.+74     	; 0x6fc <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	89 2b       	or	r24, r25
 6b8:	41 f0       	breq	.+16     	; 0x6ca <_Z14serialEventRunv+0x2e>
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	89 2b       	or	r24, r25
 6c0:	21 f0       	breq	.+8      	; 0x6ca <_Z14serialEventRunv+0x2e>
 6c2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 6c6:	81 11       	cpse	r24, r1
 6c8:	1b c0       	rjmp	.+54     	; 0x700 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	89 2b       	or	r24, r25
 6d0:	41 f0       	breq	.+16     	; 0x6e2 <_Z14serialEventRunv+0x46>
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	89 2b       	or	r24, r25
 6d8:	21 f0       	breq	.+8      	; 0x6e2 <_Z14serialEventRunv+0x46>
 6da:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 6de:	81 11       	cpse	r24, r1
 6e0:	12 c0       	rjmp	.+36     	; 0x706 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	89 2b       	or	r24, r25
 6e8:	99 f0       	breq	.+38     	; 0x710 <_Z14serialEventRunv+0x74>
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	89 2b       	or	r24, r25
 6f0:	79 f0       	breq	.+30     	; 0x710 <_Z14serialEventRunv+0x74>
 6f2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 6f6:	81 11       	cpse	r24, r1
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <_Z14serialEventRunv+0x70>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 6fa:	08 95       	ret
 6fc:	57 de       	rcall	.-850    	; 0x3ac <_Z11serialEventv>
 6fe:	d9 cf       	rjmp	.-78     	; 0x6b2 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 700:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 704:	e2 cf       	rjmp	.-60     	; 0x6ca <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 706:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 70a:	eb cf       	rjmp	.-42     	; 0x6e2 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 70c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 710:	08 95       	ret

00000712 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 712:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 714:	84 8d       	ldd	r24, Z+28	; 0x1c
 716:	df 01       	movw	r26, r30
 718:	a8 0f       	add	r26, r24
 71a:	b1 1d       	adc	r27, r1
 71c:	a3 5a       	subi	r26, 0xA3	; 163
 71e:	bf 4f       	sbci	r27, 0xFF	; 255
 720:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 722:	84 8d       	ldd	r24, Z+28	; 0x1c
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	8f 73       	andi	r24, 0x3F	; 63
 72a:	99 27       	eor	r25, r25
 72c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 72e:	a6 89       	ldd	r26, Z+22	; 0x16
 730:	b7 89       	ldd	r27, Z+23	; 0x17
 732:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 734:	a0 89       	ldd	r26, Z+16	; 0x10
 736:	b1 89       	ldd	r27, Z+17	; 0x11
 738:	8c 91       	ld	r24, X
 73a:	83 70       	andi	r24, 0x03	; 3
 73c:	80 64       	ori	r24, 0x40	; 64
 73e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 740:	93 8d       	ldd	r25, Z+27	; 0x1b
 742:	84 8d       	ldd	r24, Z+28	; 0x1c
 744:	98 13       	cpse	r25, r24
 746:	06 c0       	rjmp	.+12     	; 0x754 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 748:	02 88       	ldd	r0, Z+18	; 0x12
 74a:	f3 89       	ldd	r31, Z+19	; 0x13
 74c:	e0 2d       	mov	r30, r0
 74e:	80 81       	ld	r24, Z
 750:	8f 7d       	andi	r24, 0xDF	; 223
 752:	80 83       	st	Z, r24
 754:	08 95       	ret

00000756 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 756:	ef 92       	push	r14
 758:	ff 92       	push	r15
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	ec 01       	movw	r28, r24
  _written = true;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 768:	9b 8d       	ldd	r25, Y+27	; 0x1b
 76a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 76c:	98 13       	cpse	r25, r24
 76e:	05 c0       	rjmp	.+10     	; 0x77a <_ZN14HardwareSerial5writeEh+0x24>
 770:	e8 89       	ldd	r30, Y+16	; 0x10
 772:	f9 89       	ldd	r31, Y+17	; 0x11
 774:	80 81       	ld	r24, Z
 776:	85 fd       	sbrc	r24, 5
 778:	25 c0       	rjmp	.+74     	; 0x7c4 <_ZN14HardwareSerial5writeEh+0x6e>
 77a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 77c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 77e:	10 e0       	ldi	r17, 0x00	; 0
 780:	0f 5f       	subi	r16, 0xFF	; 255
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	0f 73       	andi	r16, 0x3F	; 63
 786:	11 27       	eor	r17, r17
 788:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 78a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 78c:	e8 12       	cpse	r14, r24
 78e:	0b c0       	rjmp	.+22     	; 0x7a6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	07 fc       	sbrc	r0, 7
 794:	fa cf       	rjmp	.-12     	; 0x78a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 796:	e8 89       	ldd	r30, Y+16	; 0x10
 798:	f9 89       	ldd	r31, Y+17	; 0x11
 79a:	80 81       	ld	r24, Z
 79c:	85 ff       	sbrs	r24, 5
 79e:	f5 cf       	rjmp	.-22     	; 0x78a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 7a0:	ce 01       	movw	r24, r28
 7a2:	b7 df       	rcall	.-146    	; 0x712 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 7a4:	f2 cf       	rjmp	.-28     	; 0x78a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 7a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 7a8:	fe 01       	movw	r30, r28
 7aa:	e8 0f       	add	r30, r24
 7ac:	f1 1d       	adc	r31, r1
 7ae:	e3 5a       	subi	r30, 0xA3	; 163
 7b0:	ff 4f       	sbci	r31, 0xFF	; 255
 7b2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 7b4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7b6:	f8 94       	cli
    _tx_buffer_head = i;
 7b8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 7ba:	ea 89       	ldd	r30, Y+18	; 0x12
 7bc:	fb 89       	ldd	r31, Y+19	; 0x13
 7be:	80 81       	ld	r24, Z
 7c0:	80 62       	ori	r24, 0x20	; 32
 7c2:	0a c0       	rjmp	.+20     	; 0x7d8 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 7c4:	9f b7       	in	r25, 0x3f	; 63
 7c6:	f8 94       	cli
      *_udr = c;
 7c8:	ee 89       	ldd	r30, Y+22	; 0x16
 7ca:	ff 89       	ldd	r31, Y+23	; 0x17
 7cc:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 7ce:	e8 89       	ldd	r30, Y+16	; 0x10
 7d0:	f9 89       	ldd	r31, Y+17	; 0x11
 7d2:	80 81       	ld	r24, Z
 7d4:	83 70       	andi	r24, 0x03	; 3
 7d6:	80 64       	ori	r24, 0x40	; 64
 7d8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7da:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	0f 91       	pop	r16
 7e8:	ff 90       	pop	r15
 7ea:	ef 90       	pop	r14
 7ec:	08 95       	ret

000007ee <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 7f4:	88 8d       	ldd	r24, Y+24	; 0x18
 7f6:	88 23       	and	r24, r24
 7f8:	c1 f0       	breq	.+48     	; 0x82a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 7fa:	ea 89       	ldd	r30, Y+18	; 0x12
 7fc:	fb 89       	ldd	r31, Y+19	; 0x13
 7fe:	80 81       	ld	r24, Z
 800:	85 fd       	sbrc	r24, 5
 802:	05 c0       	rjmp	.+10     	; 0x80e <_ZN14HardwareSerial5flushEv+0x20>
 804:	a8 89       	ldd	r26, Y+16	; 0x10
 806:	b9 89       	ldd	r27, Y+17	; 0x11
 808:	8c 91       	ld	r24, X
 80a:	86 fd       	sbrc	r24, 6
 80c:	0e c0       	rjmp	.+28     	; 0x82a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	07 fc       	sbrc	r0, 7
 812:	f5 cf       	rjmp	.-22     	; 0x7fe <_ZN14HardwareSerial5flushEv+0x10>
 814:	80 81       	ld	r24, Z
 816:	85 ff       	sbrs	r24, 5
 818:	f2 cf       	rjmp	.-28     	; 0x7fe <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 81a:	a8 89       	ldd	r26, Y+16	; 0x10
 81c:	b9 89       	ldd	r27, Y+17	; 0x11
 81e:	8c 91       	ld	r24, X
 820:	85 ff       	sbrs	r24, 5
 822:	ed cf       	rjmp	.-38     	; 0x7fe <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 824:	ce 01       	movw	r24, r28
 826:	75 df       	rcall	.-278    	; 0x712 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 828:	e8 cf       	rjmp	.-48     	; 0x7fa <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 830:	cf 92       	push	r12
 832:	df 92       	push	r13
 834:	ef 92       	push	r14
 836:	ff 92       	push	r15
 838:	1f 93       	push	r17
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	ec 01       	movw	r28, r24
 840:	6a 01       	movw	r12, r20
 842:	7b 01       	movw	r14, r22
 844:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 846:	e8 89       	ldd	r30, Y+16	; 0x10
 848:	f9 89       	ldd	r31, Y+17	; 0x11
 84a:	82 e0       	ldi	r24, 0x02	; 2
 84c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 84e:	41 15       	cp	r20, r1
 850:	51 4e       	sbci	r21, 0xE1	; 225
 852:	61 05       	cpc	r22, r1
 854:	71 05       	cpc	r23, r1
 856:	a9 f0       	breq	.+42     	; 0x882 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	79 e0       	ldi	r23, 0x09	; 9
 85c:	8d e3       	ldi	r24, 0x3D	; 61
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	a7 01       	movw	r20, r14
 862:	96 01       	movw	r18, r12
 864:	dc d2       	rcall	.+1464   	; 0xe1e <__udivmodsi4>
 866:	da 01       	movw	r26, r20
 868:	c9 01       	movw	r24, r18
 86a:	01 97       	sbiw	r24, 0x01	; 1
 86c:	a1 09       	sbc	r26, r1
 86e:	b1 09       	sbc	r27, r1
 870:	b6 95       	lsr	r27
 872:	a7 95       	ror	r26
 874:	97 95       	ror	r25
 876:	87 95       	ror	r24
 878:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 87a:	21 15       	cp	r18, r1
 87c:	80 e1       	ldi	r24, 0x10	; 16
 87e:	38 07       	cpc	r19, r24
 880:	a0 f0       	brcs	.+40     	; 0x8aa <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 882:	e8 89       	ldd	r30, Y+16	; 0x10
 884:	f9 89       	ldd	r31, Y+17	; 0x11
 886:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 888:	60 e8       	ldi	r22, 0x80	; 128
 88a:	74 e8       	ldi	r23, 0x84	; 132
 88c:	8e e1       	ldi	r24, 0x1E	; 30
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	a7 01       	movw	r20, r14
 892:	96 01       	movw	r18, r12
 894:	c4 d2       	rcall	.+1416   	; 0xe1e <__udivmodsi4>
 896:	da 01       	movw	r26, r20
 898:	c9 01       	movw	r24, r18
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	a1 09       	sbc	r26, r1
 89e:	b1 09       	sbc	r27, r1
 8a0:	b6 95       	lsr	r27
 8a2:	a7 95       	ror	r26
 8a4:	97 95       	ror	r25
 8a6:	87 95       	ror	r24
 8a8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 8aa:	ec 85       	ldd	r30, Y+12	; 0x0c
 8ac:	fd 85       	ldd	r31, Y+13	; 0x0d
 8ae:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 8b0:	ee 85       	ldd	r30, Y+14	; 0x0e
 8b2:	ff 85       	ldd	r31, Y+15	; 0x0f
 8b4:	20 83       	st	Z, r18

  _written = false;
 8b6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 8b8:	ec 89       	ldd	r30, Y+20	; 0x14
 8ba:	fd 89       	ldd	r31, Y+21	; 0x15
 8bc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 8be:	ea 89       	ldd	r30, Y+18	; 0x12
 8c0:	fb 89       	ldd	r31, Y+19	; 0x13
 8c2:	80 81       	ld	r24, Z
 8c4:	80 61       	ori	r24, 0x10	; 16
 8c6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 8c8:	ea 89       	ldd	r30, Y+18	; 0x12
 8ca:	fb 89       	ldd	r31, Y+19	; 0x13
 8cc:	80 81       	ld	r24, Z
 8ce:	88 60       	ori	r24, 0x08	; 8
 8d0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 8d2:	ea 89       	ldd	r30, Y+18	; 0x12
 8d4:	fb 89       	ldd	r31, Y+19	; 0x13
 8d6:	80 81       	ld	r24, Z
 8d8:	80 68       	ori	r24, 0x80	; 128
 8da:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 8dc:	ea 89       	ldd	r30, Y+18	; 0x12
 8de:	fb 89       	ldd	r31, Y+19	; 0x13
 8e0:	80 81       	ld	r24, Z
 8e2:	8f 7d       	andi	r24, 0xDF	; 223
 8e4:	80 83       	st	Z, r24
}
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	1f 91       	pop	r17
 8ec:	ff 90       	pop	r15
 8ee:	ef 90       	pop	r14
 8f0:	df 90       	pop	r13
 8f2:	cf 90       	pop	r12
 8f4:	08 95       	ret

000008f6 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 8f6:	1f 92       	push	r1
 8f8:	0f 92       	push	r0
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	0f 92       	push	r0
 8fe:	11 24       	eor	r1, r1
 900:	0b b6       	in	r0, 0x3b	; 59
 902:	0f 92       	push	r0
 904:	2f 93       	push	r18
 906:	8f 93       	push	r24
 908:	9f 93       	push	r25
 90a:	ef 93       	push	r30
 90c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 90e:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <Serial+0x10>
 912:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <Serial+0x11>
 916:	80 81       	ld	r24, Z
 918:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <Serial+0x16>
 91c:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <Serial+0x17>
 920:	82 fd       	sbrc	r24, 2
 922:	12 c0       	rjmp	.+36     	; 0x948 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 924:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 926:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <Serial+0x19>
 92a:	8f 5f       	subi	r24, 0xFF	; 255
 92c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 92e:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <Serial+0x1a>
 932:	82 17       	cp	r24, r18
 934:	51 f0       	breq	.+20     	; 0x94a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 936:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <Serial+0x19>
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	ea 5e       	subi	r30, 0xEA	; 234
 93e:	fd 4f       	sbci	r31, 0xFD	; 253
 940:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 942:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <Serial+0x19>
 946:	01 c0       	rjmp	.+2      	; 0x94a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 948:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 94a:	ff 91       	pop	r31
 94c:	ef 91       	pop	r30
 94e:	9f 91       	pop	r25
 950:	8f 91       	pop	r24
 952:	2f 91       	pop	r18
 954:	0f 90       	pop	r0
 956:	0b be       	out	0x3b, r0	; 59
 958:	0f 90       	pop	r0
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	0f 90       	pop	r0
 95e:	1f 90       	pop	r1
 960:	18 95       	reti

00000962 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 962:	1f 92       	push	r1
 964:	0f 92       	push	r0
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
 96c:	0b b6       	in	r0, 0x3b	; 59
 96e:	0f 92       	push	r0
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	4f 93       	push	r20
 976:	5f 93       	push	r21
 978:	6f 93       	push	r22
 97a:	7f 93       	push	r23
 97c:	8f 93       	push	r24
 97e:	9f 93       	push	r25
 980:	af 93       	push	r26
 982:	bf 93       	push	r27
 984:	ef 93       	push	r30
 986:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 988:	86 e1       	ldi	r24, 0x16	; 22
 98a:	92 e0       	ldi	r25, 0x02	; 2
 98c:	c2 de       	rcall	.-636    	; 0x712 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 98e:	ff 91       	pop	r31
 990:	ef 91       	pop	r30
 992:	bf 91       	pop	r27
 994:	af 91       	pop	r26
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	7f 91       	pop	r23
 99c:	6f 91       	pop	r22
 99e:	5f 91       	pop	r21
 9a0:	4f 91       	pop	r20
 9a2:	3f 91       	pop	r19
 9a4:	2f 91       	pop	r18
 9a6:	0f 90       	pop	r0
 9a8:	0b be       	out	0x3b, r0	; 59
 9aa:	0f 90       	pop	r0
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	0f 90       	pop	r0
 9b0:	1f 90       	pop	r1
 9b2:	18 95       	reti

000009b4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 9b4:	86 e1       	ldi	r24, 0x16	; 22
 9b6:	92 e0       	ldi	r25, 0x02	; 2
 9b8:	34 de       	rcall	.-920    	; 0x622 <_ZN14HardwareSerial9availableEv>
 9ba:	21 e0       	ldi	r18, 0x01	; 1
 9bc:	89 2b       	or	r24, r25
 9be:	09 f4       	brne	.+2      	; 0x9c2 <_Z17Serial0_availablev+0xe>
 9c0:	20 e0       	ldi	r18, 0x00	; 0
}
 9c2:	82 2f       	mov	r24, r18
 9c4:	08 95       	ret

000009c6 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 9c6:	e6 e1       	ldi	r30, 0x16	; 22
 9c8:	f2 e0       	ldi	r31, 0x02	; 2
 9ca:	13 82       	std	Z+3, r1	; 0x03
 9cc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 9ce:	88 ee       	ldi	r24, 0xE8	; 232
 9d0:	93 e0       	ldi	r25, 0x03	; 3
 9d2:	a0 e0       	ldi	r26, 0x00	; 0
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	84 83       	std	Z+4, r24	; 0x04
 9d8:	95 83       	std	Z+5, r25	; 0x05
 9da:	a6 83       	std	Z+6, r26	; 0x06
 9dc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 9de:	86 e0       	ldi	r24, 0x06	; 6
 9e0:	92 e0       	ldi	r25, 0x02	; 2
 9e2:	91 83       	std	Z+1, r25	; 0x01
 9e4:	80 83       	st	Z, r24
 9e6:	85 ec       	ldi	r24, 0xC5	; 197
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	95 87       	std	Z+13, r25	; 0x0d
 9ec:	84 87       	std	Z+12, r24	; 0x0c
 9ee:	84 ec       	ldi	r24, 0xC4	; 196
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	97 87       	std	Z+15, r25	; 0x0f
 9f4:	86 87       	std	Z+14, r24	; 0x0e
 9f6:	80 ec       	ldi	r24, 0xC0	; 192
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	91 8b       	std	Z+17, r25	; 0x11
 9fc:	80 8b       	std	Z+16, r24	; 0x10
 9fe:	81 ec       	ldi	r24, 0xC1	; 193
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	93 8b       	std	Z+19, r25	; 0x13
 a04:	82 8b       	std	Z+18, r24	; 0x12
 a06:	82 ec       	ldi	r24, 0xC2	; 194
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	95 8b       	std	Z+21, r25	; 0x15
 a0c:	84 8b       	std	Z+20, r24	; 0x14
 a0e:	86 ec       	ldi	r24, 0xC6	; 198
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	97 8b       	std	Z+23, r25	; 0x17
 a14:	86 8b       	std	Z+22, r24	; 0x16
 a16:	11 8e       	std	Z+25, r1	; 0x19
 a18:	12 8e       	std	Z+26, r1	; 0x1a
 a1a:	13 8e       	std	Z+27, r1	; 0x1b
 a1c:	14 8e       	std	Z+28, r1	; 0x1c
 a1e:	08 95       	ret

00000a20 <initVariant>:
 a20:	08 95       	ret

00000a22 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 a22:	db d0       	rcall	.+438    	; 0xbda <init>

	initVariant();
 a24:	fd df       	rcall	.-6      	; 0xa20 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 a26:	52 dc       	rcall	.-1884   	; 0x2cc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 a28:	ce e4       	ldi	r28, 0x4E	; 78
 a2a:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
 a2c:	6d dc       	rcall	.-1830   	; 0x308 <loop>
		if (serialEventRun) serialEventRun();
 a2e:	20 97       	sbiw	r28, 0x00	; 0
 a30:	e9 f3       	breq	.-6      	; 0xa2c <main+0xa>
 a32:	34 de       	rcall	.-920    	; 0x69c <_Z14serialEventRunv>
 a34:	fb cf       	rjmp	.-10     	; 0xa2c <main+0xa>

00000a36 <_ZN5Print5writeEPKhj>:
 a36:	cf 92       	push	r12

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 a38:	df 92       	push	r13
 a3a:	ef 92       	push	r14
 a3c:	ff 92       	push	r15
 a3e:	0f 93       	push	r16
 a40:	1f 93       	push	r17
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
 a46:	6c 01       	movw	r12, r24
 a48:	7a 01       	movw	r14, r20
 a4a:	8b 01       	movw	r16, r22
  size_t n = 0;
 a4c:	c0 e0       	ldi	r28, 0x00	; 0
 a4e:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 a50:	ce 15       	cp	r28, r14
 a52:	df 05       	cpc	r29, r15
 a54:	81 f0       	breq	.+32     	; 0xa76 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 a56:	d8 01       	movw	r26, r16
 a58:	6d 91       	ld	r22, X+
 a5a:	8d 01       	movw	r16, r26
 a5c:	d6 01       	movw	r26, r12
 a5e:	ed 91       	ld	r30, X+
 a60:	fc 91       	ld	r31, X
 a62:	01 90       	ld	r0, Z+
 a64:	f0 81       	ld	r31, Z
 a66:	e0 2d       	mov	r30, r0
 a68:	c6 01       	movw	r24, r12
 a6a:	19 95       	eicall
 a6c:	89 2b       	or	r24, r25
 a6e:	11 f0       	breq	.+4      	; 0xa74 <_ZN5Print5writeEPKhj+0x3e>
 a70:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 a72:	ee cf       	rjmp	.-36     	; 0xa50 <_ZN5Print5writeEPKhj+0x1a>
 a74:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 a76:	c7 01       	movw	r24, r14
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	ff 90       	pop	r15
 a82:	ef 90       	pop	r14
 a84:	df 90       	pop	r13
 a86:	cf 90       	pop	r12
 a88:	08 95       	ret

00000a8a <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 a8a:	1f 92       	push	r1
 a8c:	0f 92       	push	r0
 a8e:	0f b6       	in	r0, 0x3f	; 63
 a90:	0f 92       	push	r0
 a92:	11 24       	eor	r1, r1
 a94:	2f 93       	push	r18
 a96:	3f 93       	push	r19
 a98:	8f 93       	push	r24
 a9a:	9f 93       	push	r25
 a9c:	af 93       	push	r26
 a9e:	bf 93       	push	r27
 aa0:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <timer0_millis>
 aa4:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <timer0_millis+0x1>
 aa8:	a0 91 b6 02 	lds	r26, 0x02B6	; 0x8002b6 <timer0_millis+0x2>
 aac:	b0 91 b7 02 	lds	r27, 0x02B7	; 0x8002b7 <timer0_millis+0x3>
 ab0:	30 91 b3 02 	lds	r19, 0x02B3	; 0x8002b3 <timer0_fract>
 ab4:	23 e0       	ldi	r18, 0x03	; 3
 ab6:	23 0f       	add	r18, r19
 ab8:	2d 37       	cpi	r18, 0x7D	; 125
 aba:	20 f4       	brcc	.+8      	; 0xac4 <__vector_23+0x3a>
 abc:	01 96       	adiw	r24, 0x01	; 1
 abe:	a1 1d       	adc	r26, r1
 ac0:	b1 1d       	adc	r27, r1
 ac2:	05 c0       	rjmp	.+10     	; 0xace <__vector_23+0x44>
 ac4:	26 e8       	ldi	r18, 0x86	; 134
 ac6:	23 0f       	add	r18, r19
 ac8:	02 96       	adiw	r24, 0x02	; 2
 aca:	a1 1d       	adc	r26, r1
 acc:	b1 1d       	adc	r27, r1
 ace:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <timer0_fract>
 ad2:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <timer0_millis>
 ad6:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <timer0_millis+0x1>
 ada:	a0 93 b6 02 	sts	0x02B6, r26	; 0x8002b6 <timer0_millis+0x2>
 ade:	b0 93 b7 02 	sts	0x02B7, r27	; 0x8002b7 <timer0_millis+0x3>
 ae2:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <timer0_overflow_count>
 ae6:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x1>
 aea:	a0 91 ba 02 	lds	r26, 0x02BA	; 0x8002ba <timer0_overflow_count+0x2>
 aee:	b0 91 bb 02 	lds	r27, 0x02BB	; 0x8002bb <timer0_overflow_count+0x3>
 af2:	01 96       	adiw	r24, 0x01	; 1
 af4:	a1 1d       	adc	r26, r1
 af6:	b1 1d       	adc	r27, r1
 af8:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <timer0_overflow_count>
 afc:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <timer0_overflow_count+0x1>
 b00:	a0 93 ba 02 	sts	0x02BA, r26	; 0x8002ba <timer0_overflow_count+0x2>
 b04:	b0 93 bb 02 	sts	0x02BB, r27	; 0x8002bb <timer0_overflow_count+0x3>
 b08:	bf 91       	pop	r27
 b0a:	af 91       	pop	r26
 b0c:	9f 91       	pop	r25
 b0e:	8f 91       	pop	r24
 b10:	3f 91       	pop	r19
 b12:	2f 91       	pop	r18
 b14:	0f 90       	pop	r0
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	0f 90       	pop	r0
 b1a:	1f 90       	pop	r1
 b1c:	18 95       	reti

00000b1e <micros>:
 b1e:	3f b7       	in	r19, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <timer0_overflow_count>
 b26:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x1>
 b2a:	a0 91 ba 02 	lds	r26, 0x02BA	; 0x8002ba <timer0_overflow_count+0x2>
 b2e:	b0 91 bb 02 	lds	r27, 0x02BB	; 0x8002bb <timer0_overflow_count+0x3>
 b32:	26 b5       	in	r18, 0x26	; 38
 b34:	a8 9b       	sbis	0x15, 0	; 21
 b36:	05 c0       	rjmp	.+10     	; 0xb42 <micros+0x24>
 b38:	2f 3f       	cpi	r18, 0xFF	; 255
 b3a:	19 f0       	breq	.+6      	; 0xb42 <micros+0x24>
 b3c:	01 96       	adiw	r24, 0x01	; 1
 b3e:	a1 1d       	adc	r26, r1
 b40:	b1 1d       	adc	r27, r1
 b42:	3f bf       	out	0x3f, r19	; 63
 b44:	ba 2f       	mov	r27, r26
 b46:	a9 2f       	mov	r26, r25
 b48:	98 2f       	mov	r25, r24
 b4a:	88 27       	eor	r24, r24
 b4c:	82 0f       	add	r24, r18
 b4e:	91 1d       	adc	r25, r1
 b50:	a1 1d       	adc	r26, r1
 b52:	b1 1d       	adc	r27, r1
 b54:	bc 01       	movw	r22, r24
 b56:	cd 01       	movw	r24, r26
 b58:	42 e0       	ldi	r20, 0x02	; 2
 b5a:	66 0f       	add	r22, r22
 b5c:	77 1f       	adc	r23, r23
 b5e:	88 1f       	adc	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	4a 95       	dec	r20
 b64:	d1 f7       	brne	.-12     	; 0xb5a <micros+0x3c>
 b66:	08 95       	ret

00000b68 <delay>:
 b68:	8f 92       	push	r8
 b6a:	9f 92       	push	r9
 b6c:	af 92       	push	r10
 b6e:	bf 92       	push	r11
 b70:	cf 92       	push	r12
 b72:	df 92       	push	r13
 b74:	ef 92       	push	r14
 b76:	ff 92       	push	r15
 b78:	6b 01       	movw	r12, r22
 b7a:	7c 01       	movw	r14, r24
 b7c:	d0 df       	rcall	.-96     	; 0xb1e <micros>
 b7e:	4b 01       	movw	r8, r22
 b80:	5c 01       	movw	r10, r24
 b82:	c1 14       	cp	r12, r1
 b84:	d1 04       	cpc	r13, r1
 b86:	e1 04       	cpc	r14, r1
 b88:	f1 04       	cpc	r15, r1
 b8a:	f1 f0       	breq	.+60     	; 0xbc8 <delay+0x60>
 b8c:	47 d1       	rcall	.+654    	; 0xe1c <yield>
 b8e:	c7 df       	rcall	.-114    	; 0xb1e <micros>
 b90:	dc 01       	movw	r26, r24
 b92:	cb 01       	movw	r24, r22
 b94:	88 19       	sub	r24, r8
 b96:	99 09       	sbc	r25, r9
 b98:	aa 09       	sbc	r26, r10
 b9a:	bb 09       	sbc	r27, r11
 b9c:	88 3e       	cpi	r24, 0xE8	; 232
 b9e:	93 40       	sbci	r25, 0x03	; 3
 ba0:	a1 05       	cpc	r26, r1
 ba2:	b1 05       	cpc	r27, r1
 ba4:	70 f3       	brcs	.-36     	; 0xb82 <delay+0x1a>
 ba6:	21 e0       	ldi	r18, 0x01	; 1
 ba8:	c2 1a       	sub	r12, r18
 baa:	d1 08       	sbc	r13, r1
 bac:	e1 08       	sbc	r14, r1
 bae:	f1 08       	sbc	r15, r1
 bb0:	88 ee       	ldi	r24, 0xE8	; 232
 bb2:	88 0e       	add	r8, r24
 bb4:	83 e0       	ldi	r24, 0x03	; 3
 bb6:	98 1e       	adc	r9, r24
 bb8:	a1 1c       	adc	r10, r1
 bba:	b1 1c       	adc	r11, r1
 bbc:	c1 14       	cp	r12, r1
 bbe:	d1 04       	cpc	r13, r1
 bc0:	e1 04       	cpc	r14, r1
 bc2:	f1 04       	cpc	r15, r1
 bc4:	21 f7       	brne	.-56     	; 0xb8e <delay+0x26>
 bc6:	dd cf       	rjmp	.-70     	; 0xb82 <delay+0x1a>
 bc8:	ff 90       	pop	r15
 bca:	ef 90       	pop	r14
 bcc:	df 90       	pop	r13
 bce:	cf 90       	pop	r12
 bd0:	bf 90       	pop	r11
 bd2:	af 90       	pop	r10
 bd4:	9f 90       	pop	r9
 bd6:	8f 90       	pop	r8
 bd8:	08 95       	ret

00000bda <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 bda:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 bdc:	84 b5       	in	r24, 0x24	; 36
 bde:	82 60       	ori	r24, 0x02	; 2
 be0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 be2:	84 b5       	in	r24, 0x24	; 36
 be4:	81 60       	ori	r24, 0x01	; 1
 be6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 be8:	85 b5       	in	r24, 0x25	; 37
 bea:	82 60       	ori	r24, 0x02	; 2
 bec:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 bee:	85 b5       	in	r24, 0x25	; 37
 bf0:	81 60       	ori	r24, 0x01	; 1
 bf2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 bf4:	ee e6       	ldi	r30, 0x6E	; 110
 bf6:	f0 e0       	ldi	r31, 0x00	; 0
 bf8:	80 81       	ld	r24, Z
 bfa:	81 60       	ori	r24, 0x01	; 1
 bfc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 bfe:	e1 e8       	ldi	r30, 0x81	; 129
 c00:	f0 e0       	ldi	r31, 0x00	; 0
 c02:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 c04:	80 81       	ld	r24, Z
 c06:	82 60       	ori	r24, 0x02	; 2
 c08:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 c0a:	80 81       	ld	r24, Z
 c0c:	81 60       	ori	r24, 0x01	; 1
 c0e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 c10:	e0 e8       	ldi	r30, 0x80	; 128
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	80 81       	ld	r24, Z
 c16:	81 60       	ori	r24, 0x01	; 1
 c18:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 c1a:	e1 eb       	ldi	r30, 0xB1	; 177
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	80 81       	ld	r24, Z
 c20:	84 60       	ori	r24, 0x04	; 4
 c22:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 c24:	e0 eb       	ldi	r30, 0xB0	; 176
 c26:	f0 e0       	ldi	r31, 0x00	; 0
 c28:	80 81       	ld	r24, Z
 c2a:	81 60       	ori	r24, 0x01	; 1
 c2c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 c2e:	e1 e9       	ldi	r30, 0x91	; 145
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	80 81       	ld	r24, Z
 c34:	82 60       	ori	r24, 0x02	; 2
 c36:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 c38:	80 81       	ld	r24, Z
 c3a:	81 60       	ori	r24, 0x01	; 1
 c3c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 c3e:	e0 e9       	ldi	r30, 0x90	; 144
 c40:	f0 e0       	ldi	r31, 0x00	; 0
 c42:	80 81       	ld	r24, Z
 c44:	81 60       	ori	r24, 0x01	; 1
 c46:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 c48:	e1 ea       	ldi	r30, 0xA1	; 161
 c4a:	f0 e0       	ldi	r31, 0x00	; 0
 c4c:	80 81       	ld	r24, Z
 c4e:	82 60       	ori	r24, 0x02	; 2
 c50:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 c52:	80 81       	ld	r24, Z
 c54:	81 60       	ori	r24, 0x01	; 1
 c56:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 c58:	e0 ea       	ldi	r30, 0xA0	; 160
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	80 81       	ld	r24, Z
 c5e:	81 60       	ori	r24, 0x01	; 1
 c60:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 c62:	e1 e2       	ldi	r30, 0x21	; 33
 c64:	f1 e0       	ldi	r31, 0x01	; 1
 c66:	80 81       	ld	r24, Z
 c68:	82 60       	ori	r24, 0x02	; 2
 c6a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 c6c:	80 81       	ld	r24, Z
 c6e:	81 60       	ori	r24, 0x01	; 1
 c70:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 c72:	e0 e2       	ldi	r30, 0x20	; 32
 c74:	f1 e0       	ldi	r31, 0x01	; 1
 c76:	80 81       	ld	r24, Z
 c78:	81 60       	ori	r24, 0x01	; 1
 c7a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 c7c:	ea e7       	ldi	r30, 0x7A	; 122
 c7e:	f0 e0       	ldi	r31, 0x00	; 0
 c80:	80 81       	ld	r24, Z
 c82:	84 60       	ori	r24, 0x04	; 4
 c84:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 c86:	80 81       	ld	r24, Z
 c88:	82 60       	ori	r24, 0x02	; 2
 c8a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 c8c:	80 81       	ld	r24, Z
 c8e:	81 60       	ori	r24, 0x01	; 1
 c90:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 c92:	80 81       	ld	r24, Z
 c94:	80 68       	ori	r24, 0x80	; 128
 c96:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 c98:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 c9c:	08 95       	ret

00000c9e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	fc 01       	movw	r30, r24
 ca2:	31 97       	sbiw	r30, 0x01	; 1
 ca4:	e2 31       	cpi	r30, 0x12	; 18
 ca6:	f1 05       	cpc	r31, r1
 ca8:	08 f0       	brcs	.+2      	; 0xcac <turnOffPWM+0xe>
 caa:	4d c0       	rjmp	.+154    	; 0xd46 <turnOffPWM+0xa8>
 cac:	88 27       	eor	r24, r24
 cae:	ee 58       	subi	r30, 0x8E	; 142
 cb0:	ff 4f       	sbci	r31, 0xFF	; 255
 cb2:	8f 4f       	sbci	r24, 0xFF	; 255
 cb4:	d6 c0       	rjmp	.+428    	; 0xe62 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 cb6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 cba:	8f 77       	andi	r24, 0x7F	; 127
 cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 cbe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 cc2:	8f 7d       	andi	r24, 0xDF	; 223
 cc4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 cc8:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 cca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 cce:	87 7f       	andi	r24, 0xF7	; 247
 cd0:	f9 cf       	rjmp	.-14     	; 0xcc4 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 cd2:	84 b5       	in	r24, 0x24	; 36
 cd4:	8f 77       	andi	r24, 0x7F	; 127
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 cd8:	84 b5       	in	r24, 0x24	; 36
 cda:	8f 7d       	andi	r24, 0xDF	; 223
 cdc:	84 bd       	out	0x24, r24	; 36
 cde:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 ce0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 ce4:	8f 77       	andi	r24, 0x7F	; 127
 ce6:	03 c0       	rjmp	.+6      	; 0xcee <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 ce8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 cec:	8f 7d       	andi	r24, 0xDF	; 223
 cee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 cf2:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 cf4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 cf8:	8f 77       	andi	r24, 0x7F	; 127
 cfa:	07 c0       	rjmp	.+14     	; 0xd0a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 cfc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 d00:	8f 7d       	andi	r24, 0xDF	; 223
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 d04:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 d08:	87 7f       	andi	r24, 0xF7	; 247
 d0a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 d0e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 d10:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 d14:	8f 77       	andi	r24, 0x7F	; 127
 d16:	07 c0       	rjmp	.+14     	; 0xd26 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 d18:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 d1c:	8f 7d       	andi	r24, 0xDF	; 223
 d1e:	03 c0       	rjmp	.+6      	; 0xd26 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 d20:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 d24:	87 7f       	andi	r24, 0xF7	; 247
 d26:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 d2a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 d2c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 d30:	8f 77       	andi	r24, 0x7F	; 127
 d32:	07 c0       	rjmp	.+14     	; 0xd42 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 d34:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 d38:	8f 7d       	andi	r24, 0xDF	; 223
 d3a:	03 c0       	rjmp	.+6      	; 0xd42 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 d3c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 d40:	87 7f       	andi	r24, 0xF7	; 247
 d42:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 d46:	08 95       	ret

00000d48 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 d48:	cf 93       	push	r28
 d4a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	fc 01       	movw	r30, r24
 d50:	e2 5b       	subi	r30, 0xB2	; 178
 d52:	fe 4f       	sbci	r31, 0xFE	; 254
 d54:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 d56:	fc 01       	movw	r30, r24
 d58:	ec 56       	subi	r30, 0x6C	; 108
 d5a:	fe 4f       	sbci	r31, 0xFE	; 254
 d5c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 d5e:	88 23       	and	r24, r24
 d60:	61 f1       	breq	.+88     	; 0xdba <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	88 0f       	add	r24, r24
 d66:	99 1f       	adc	r25, r25
 d68:	fc 01       	movw	r30, r24
 d6a:	ec 50       	subi	r30, 0x0C	; 12
 d6c:	fe 4f       	sbci	r31, 0xFE	; 254
 d6e:	c5 91       	lpm	r28, Z+
 d70:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 d72:	fc 01       	movw	r30, r24
 d74:	e6 52       	subi	r30, 0x26	; 38
 d76:	fe 4f       	sbci	r31, 0xFE	; 254
 d78:	a5 91       	lpm	r26, Z+
 d7a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 d7c:	61 11       	cpse	r22, r1
 d7e:	09 c0       	rjmp	.+18     	; 0xd92 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 d80:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d82:	f8 94       	cli
		*reg &= ~bit;
 d84:	88 81       	ld	r24, Y
 d86:	20 95       	com	r18
 d88:	82 23       	and	r24, r18
 d8a:	88 83       	st	Y, r24
		*out &= ~bit;
 d8c:	ec 91       	ld	r30, X
 d8e:	2e 23       	and	r18, r30
 d90:	0b c0       	rjmp	.+22     	; 0xda8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 d92:	62 30       	cpi	r22, 0x02	; 2
 d94:	61 f4       	brne	.+24     	; 0xdae <pinMode+0x66>
		uint8_t oldSREG = SREG;
 d96:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d98:	f8 94       	cli
		*reg &= ~bit;
 d9a:	88 81       	ld	r24, Y
 d9c:	32 2f       	mov	r19, r18
 d9e:	30 95       	com	r19
 da0:	83 23       	and	r24, r19
 da2:	88 83       	st	Y, r24
		*out |= bit;
 da4:	ec 91       	ld	r30, X
 da6:	2e 2b       	or	r18, r30
 da8:	2c 93       	st	X, r18
		SREG = oldSREG;
 daa:	9f bf       	out	0x3f, r25	; 63
 dac:	06 c0       	rjmp	.+12     	; 0xdba <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 dae:	8f b7       	in	r24, 0x3f	; 63
                cli();
 db0:	f8 94       	cli
		*reg |= bit;
 db2:	e8 81       	ld	r30, Y
 db4:	2e 2b       	or	r18, r30
 db6:	28 83       	st	Y, r18
		SREG = oldSREG;
 db8:	8f bf       	out	0x3f, r24	; 63
	}
}
 dba:	df 91       	pop	r29
 dbc:	cf 91       	pop	r28
 dbe:	08 95       	ret

00000dc0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 dc0:	1f 93       	push	r17
 dc2:	cf 93       	push	r28
 dc4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 dc6:	28 2f       	mov	r18, r24
 dc8:	30 e0       	ldi	r19, 0x00	; 0
 dca:	f9 01       	movw	r30, r18
 dcc:	e8 5f       	subi	r30, 0xF8	; 248
 dce:	fe 4f       	sbci	r31, 0xFE	; 254
 dd0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 dd2:	f9 01       	movw	r30, r18
 dd4:	e2 5b       	subi	r30, 0xB2	; 178
 dd6:	fe 4f       	sbci	r31, 0xFE	; 254
 dd8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 dda:	f9 01       	movw	r30, r18
 ddc:	ec 56       	subi	r30, 0x6C	; 108
 dde:	fe 4f       	sbci	r31, 0xFE	; 254
 de0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 de2:	cc 23       	and	r28, r28
 de4:	b9 f0       	breq	.+46     	; 0xe14 <digitalWrite+0x54>
 de6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 de8:	81 11       	cpse	r24, r1
 dea:	59 df       	rcall	.-334    	; 0xc9e <turnOffPWM>

	out = portOutputRegister(port);
 dec:	ec 2f       	mov	r30, r28
 dee:	f0 e0       	ldi	r31, 0x00	; 0
 df0:	ee 0f       	add	r30, r30
 df2:	ff 1f       	adc	r31, r31
 df4:	e6 52       	subi	r30, 0x26	; 38
 df6:	fe 4f       	sbci	r31, 0xFE	; 254
 df8:	a5 91       	lpm	r26, Z+
 dfa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 dfc:	9f b7       	in	r25, 0x3f	; 63
	cli();
 dfe:	f8 94       	cli

	if (val == LOW) {
 e00:	11 11       	cpse	r17, r1
 e02:	04 c0       	rjmp	.+8      	; 0xe0c <digitalWrite+0x4c>
		*out &= ~bit;
 e04:	8c 91       	ld	r24, X
 e06:	d0 95       	com	r29
 e08:	d8 23       	and	r29, r24
 e0a:	02 c0       	rjmp	.+4      	; 0xe10 <digitalWrite+0x50>
	} else {
		*out |= bit;
 e0c:	ec 91       	ld	r30, X
 e0e:	de 2b       	or	r29, r30
 e10:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 e12:	9f bf       	out	0x3f, r25	; 63
}
 e14:	df 91       	pop	r29
 e16:	cf 91       	pop	r28
 e18:	1f 91       	pop	r17
 e1a:	08 95       	ret

00000e1c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 e1c:	08 95       	ret

00000e1e <__udivmodsi4>:
 e1e:	a1 e2       	ldi	r26, 0x21	; 33
 e20:	1a 2e       	mov	r1, r26
 e22:	aa 1b       	sub	r26, r26
 e24:	bb 1b       	sub	r27, r27
 e26:	fd 01       	movw	r30, r26
 e28:	0d c0       	rjmp	.+26     	; 0xe44 <__udivmodsi4_ep>

00000e2a <__udivmodsi4_loop>:
 e2a:	aa 1f       	adc	r26, r26
 e2c:	bb 1f       	adc	r27, r27
 e2e:	ee 1f       	adc	r30, r30
 e30:	ff 1f       	adc	r31, r31
 e32:	a2 17       	cp	r26, r18
 e34:	b3 07       	cpc	r27, r19
 e36:	e4 07       	cpc	r30, r20
 e38:	f5 07       	cpc	r31, r21
 e3a:	20 f0       	brcs	.+8      	; 0xe44 <__udivmodsi4_ep>
 e3c:	a2 1b       	sub	r26, r18
 e3e:	b3 0b       	sbc	r27, r19
 e40:	e4 0b       	sbc	r30, r20
 e42:	f5 0b       	sbc	r31, r21

00000e44 <__udivmodsi4_ep>:
 e44:	66 1f       	adc	r22, r22
 e46:	77 1f       	adc	r23, r23
 e48:	88 1f       	adc	r24, r24
 e4a:	99 1f       	adc	r25, r25
 e4c:	1a 94       	dec	r1
 e4e:	69 f7       	brne	.-38     	; 0xe2a <__udivmodsi4_loop>
 e50:	60 95       	com	r22
 e52:	70 95       	com	r23
 e54:	80 95       	com	r24
 e56:	90 95       	com	r25
 e58:	9b 01       	movw	r18, r22
 e5a:	ac 01       	movw	r20, r24
 e5c:	bd 01       	movw	r22, r26
 e5e:	cf 01       	movw	r24, r30
 e60:	08 95       	ret

00000e62 <__tablejump2__>:
 e62:	ee 0f       	add	r30, r30
 e64:	ff 1f       	adc	r31, r31
 e66:	88 1f       	adc	r24, r24
 e68:	8b bf       	out	0x3b, r24	; 59
 e6a:	07 90       	elpm	r0, Z+
 e6c:	f6 91       	elpm	r31, Z
 e6e:	e0 2d       	mov	r30, r0
 e70:	19 94       	eijmp

00000e72 <_exit>:
 e72:	f8 94       	cli

00000e74 <__stop_program>:
 e74:	ff cf       	rjmp	.-2      	; 0xe74 <__stop_program>
