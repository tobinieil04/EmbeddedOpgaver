
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800200  0000114e  000011e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000114e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080025e  0080025e  00001240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007e0c  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cc4  00000000  00000000  0000932c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016f4  00000000  00000000  0000aff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  0000c6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000215a  00000000  00000000  0000cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025bd  00000000  00000000  0000ef4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00011507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	dd c5       	rjmp	.+3002   	; 0xc18 <__vector_23>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	6f c3       	rjmp	.+1758   	; 0x744 <__vector_25>
      66:	00 00       	nop
      68:	a3 c3       	rjmp	.+1862   	; 0x7b0 <__vector_26>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3c c0       	rjmp	.+120    	; 0x146 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	36 c0       	rjmp	.+108    	; 0x146 <__bad_interrupt>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	0a 04       	cpc	r0, r10

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ee e4       	ldi	r30, 0x4E	; 78
      fe:	f1 e1       	ldi	r31, 0x11	; 17
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ae 35       	cpi	r26, 0x5E	; 94
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	23 e0       	ldi	r18, 0x03	; 3
     112:	ae e5       	ldi	r26, 0x5E	; 94
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a4 30       	cpi	r26, 0x04	; 4
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 9d 08 	call	0x113a	; 0x113a <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	97 d3       	rcall	.+1838   	; 0x870 <main>
     142:	0c 94 a5 08 	jmp	0x114a	; 0x114a <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     148:	26 e0       	ldi	r18, 0x06	; 6
     14a:	40 e0       	ldi	r20, 0x00	; 0
     14c:	52 ec       	ldi	r21, 0xC2	; 194
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	8e e5       	ldi	r24, 0x5E	; 94
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	93 c2       	rjmp	.+1318   	; 0x67e <_ZN14HardwareSerial5beginEmh>

00000158 <loop>:
	Serial.begin(115200);
}

void loop()
{
	Serial.print("chrValue:   ");
     158:	68 e0       	ldi	r22, 0x08	; 8
     15a:	72 e0       	ldi	r23, 0x02	; 2
     15c:	8e e5       	ldi	r24, 0x5E	; 94
     15e:	92 e0       	ldi	r25, 0x02	; 2
     160:	d0 d3       	rcall	.+1952   	; 0x902 <_ZN5Print5printEPKc>
	Serial.print(chrValue); Serial.print(" ");
     162:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <chrValue>
     166:	8e e5       	ldi	r24, 0x5E	; 94
     168:	92 e0       	ldi	r25, 0x02	; 2
     16a:	cc d3       	rcall	.+1944   	; 0x904 <_ZN5Print5printEc>
     16c:	63 e1       	ldi	r22, 0x13	; 19
     16e:	72 e0       	ldi	r23, 0x02	; 2
     170:	8e e5       	ldi	r24, 0x5E	; 94
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	c6 d3       	rcall	.+1932   	; 0x902 <_ZN5Print5printEPKc>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     176:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <chrValue>
     17a:	8e e5       	ldi	r24, 0x5E	; 94
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	12 d2       	rcall	.+1060   	; 0x5a4 <_ZN14HardwareSerial5writeEh>
	Serial.write(chrValue); Serial.print(" ");
     180:	63 e1       	ldi	r22, 0x13	; 19
     182:	72 e0       	ldi	r23, 0x02	; 2
     184:	8e e5       	ldi	r24, 0x5E	; 94
     186:	92 e0       	ldi	r25, 0x02	; 2
     188:	bc d3       	rcall	.+1912   	; 0x902 <_ZN5Print5printEPKc>
	Serial.print(chrValue, DEC);
     18a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <chrValue>
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	4a e0       	ldi	r20, 0x0A	; 10
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	8e e5       	ldi	r24, 0x5E	; 94
     196:	92 e0       	ldi	r25, 0x02	; 2
	Serial.println();
     198:	62 d4       	rcall	.+2244   	; 0xa5e <_ZN5Print5printEii>
     19a:	8e e5       	ldi	r24, 0x5E	; 94
     19c:	92 e0       	ldi	r25, 0x02	; 2

	Serial.print("byteValue:  ");
     19e:	b9 d3       	rcall	.+1906   	; 0x912 <_ZN5Print7printlnEv>
     1a0:	65 e1       	ldi	r22, 0x15	; 21
     1a2:	72 e0       	ldi	r23, 0x02	; 2
     1a4:	8e e5       	ldi	r24, 0x5E	; 94
     1a6:	92 e0       	ldi	r25, 0x02	; 2
	Serial.print(byteValue); Serial.print(" ");
     1a8:	ac d3       	rcall	.+1880   	; 0x902 <_ZN5Print5printEPKc>
     1aa:	4a e0       	ldi	r20, 0x0A	; 10
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <byteValue>
     1b2:	8e e5       	ldi	r24, 0x5E	; 94
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	03 d4       	rcall	.+2054   	; 0x9be <_ZN5Print5printEhi>
     1b8:	63 e1       	ldi	r22, 0x13	; 19
     1ba:	72 e0       	ldi	r23, 0x02	; 2
     1bc:	8e e5       	ldi	r24, 0x5E	; 94
     1be:	92 e0       	ldi	r25, 0x02	; 2
	Serial.write(byteValue); Serial.print(" ");
     1c0:	a0 d3       	rcall	.+1856   	; 0x902 <_ZN5Print5printEPKc>
     1c2:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <byteValue>
     1c6:	8e e5       	ldi	r24, 0x5E	; 94
     1c8:	92 e0       	ldi	r25, 0x02	; 2
     1ca:	ec d1       	rcall	.+984    	; 0x5a4 <_ZN14HardwareSerial5writeEh>
     1cc:	63 e1       	ldi	r22, 0x13	; 19
     1ce:	72 e0       	ldi	r23, 0x02	; 2
     1d0:	8e e5       	ldi	r24, 0x5E	; 94
     1d2:	92 e0       	ldi	r25, 0x02	; 2
	Serial.print(byteValue, DEC);
     1d4:	96 d3       	rcall	.+1836   	; 0x902 <_ZN5Print5printEPKc>
     1d6:	4a e0       	ldi	r20, 0x0A	; 10
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <byteValue>
     1de:	8e e5       	ldi	r24, 0x5E	; 94
     1e0:	92 e0       	ldi	r25, 0x02	; 2
	Serial.println();
     1e2:	ed d3       	rcall	.+2010   	; 0x9be <_ZN5Print5printEhi>
     1e4:	8e e5       	ldi	r24, 0x5E	; 94
     1e6:	92 e0       	ldi	r25, 0x02	; 2

	Serial.print("intValue:   ");
     1e8:	94 d3       	rcall	.+1832   	; 0x912 <_ZN5Print7printlnEv>
     1ea:	62 e2       	ldi	r22, 0x22	; 34
     1ec:	72 e0       	ldi	r23, 0x02	; 2
     1ee:	8e e5       	ldi	r24, 0x5E	; 94
     1f0:	92 e0       	ldi	r25, 0x02	; 2
	Serial.print(intValue); Serial.print(" ");
     1f2:	87 d3       	rcall	.+1806   	; 0x902 <_ZN5Print5printEPKc>
     1f4:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <intValue>
     1f8:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <intValue+0x1>
     1fc:	4a e0       	ldi	r20, 0x0A	; 10
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	8e e5       	ldi	r24, 0x5E	; 94
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	2c d4       	rcall	.+2136   	; 0xa5e <_ZN5Print5printEii>
     206:	63 e1       	ldi	r22, 0x13	; 19
     208:	72 e0       	ldi	r23, 0x02	; 2
     20a:	8e e5       	ldi	r24, 0x5E	; 94
     20c:	92 e0       	ldi	r25, 0x02	; 2
	Serial.print(intValue, DEC); Serial.print(" ");
     20e:	79 d3       	rcall	.+1778   	; 0x902 <_ZN5Print5printEPKc>
     210:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <intValue>
     214:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <intValue+0x1>
     218:	4a e0       	ldi	r20, 0x0A	; 10
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	8e e5       	ldi	r24, 0x5E	; 94
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	1e d4       	rcall	.+2108   	; 0xa5e <_ZN5Print5printEii>
     222:	63 e1       	ldi	r22, 0x13	; 19
     224:	72 e0       	ldi	r23, 0x02	; 2
     226:	8e e5       	ldi	r24, 0x5E	; 94
     228:	92 e0       	ldi	r25, 0x02	; 2
	Serial.print(intValue, HEX); Serial.print(" ");
     22a:	6b d3       	rcall	.+1750   	; 0x902 <_ZN5Print5printEPKc>
     22c:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <intValue>
     230:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <intValue+0x1>
     234:	40 e1       	ldi	r20, 0x10	; 16
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	8e e5       	ldi	r24, 0x5E	; 94
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	10 d4       	rcall	.+2080   	; 0xa5e <_ZN5Print5printEii>
     23e:	63 e1       	ldi	r22, 0x13	; 19
     240:	72 e0       	ldi	r23, 0x02	; 2
     242:	8e e5       	ldi	r24, 0x5E	; 94
     244:	92 e0       	ldi	r25, 0x02	; 2
	Serial.print(intValue, OCT); Serial.print(" ");
     246:	5d d3       	rcall	.+1722   	; 0x902 <_ZN5Print5printEPKc>
     248:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <intValue>
     24c:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <intValue+0x1>
     250:	48 e0       	ldi	r20, 0x08	; 8
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	8e e5       	ldi	r24, 0x5E	; 94
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	02 d4       	rcall	.+2052   	; 0xa5e <_ZN5Print5printEii>
     25a:	63 e1       	ldi	r22, 0x13	; 19
     25c:	72 e0       	ldi	r23, 0x02	; 2
     25e:	8e e5       	ldi	r24, 0x5E	; 94
	Serial.print(intValue, BIN);
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	4f d3       	rcall	.+1694   	; 0x902 <_ZN5Print5printEPKc>
     264:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <intValue>
     268:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <intValue+0x1>
     26c:	42 e0       	ldi	r20, 0x02	; 2
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	8e e5       	ldi	r24, 0x5E	; 94
	Serial.println();
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	f4 d3       	rcall	.+2024   	; 0xa5e <_ZN5Print5printEii>
     276:	8e e5       	ldi	r24, 0x5E	; 94
     278:	92 e0       	ldi	r25, 0x02	; 2

	Serial.print("floatValue: ");
     27a:	4b d3       	rcall	.+1686   	; 0x912 <_ZN5Print7printlnEv>
     27c:	6f e2       	ldi	r22, 0x2F	; 47
     27e:	72 e0       	ldi	r23, 0x02	; 2
     280:	8e e5       	ldi	r24, 0x5E	; 94
     282:	92 e0       	ldi	r25, 0x02	; 2
	Serial.println(floatValue);
     284:	3e d3       	rcall	.+1660   	; 0x902 <_ZN5Print5printEPKc>
     286:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     28a:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     28e:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     292:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     296:	22 e0       	ldi	r18, 0x02	; 2
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	8e e5       	ldi	r24, 0x5E	; 94
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	ac d4       	rcall	.+2392   	; 0xbf8 <_ZN5Print7printlnEdi>
	Serial.println();
     2a0:	8e e5       	ldi	r24, 0x5E	; 94
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	36 d3       	rcall	.+1644   	; 0x912 <_ZN5Print7printlnEv>
     2a6:	68 ee       	ldi	r22, 0xE8	; 232

	delay(1000); // delay a second between numbers
     2a8:	73 e0       	ldi	r23, 0x03	; 3
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	23 d5       	rcall	.+2630   	; 0xcf6 <delay>
     2b0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <chrValue>
	chrValue++;  // to the next value
     2b4:	8f 5f       	subi	r24, 0xFF	; 255
     2b6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <chrValue>
     2ba:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <byteValue>
	byteValue++;
     2be:	8f 5f       	subi	r24, 0xFF	; 255
     2c0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <byteValue>
     2c4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <intValue>
	intValue++;
     2c8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <intValue+0x1>
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <intValue+0x1>
     2d2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <intValue>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
	floatValue += 1;
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	40 e8       	ldi	r20, 0x80	; 128
     2dc:	5f e3       	ldi	r21, 0x3F	; 63
     2de:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     2e2:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     2e6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     2ea:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     2ee:	0a d0       	rcall	.+20     	; 0x304 <__addsf3>
     2f0:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <__DATA_REGION_ORIGIN__>
     2f4:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     2f8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     2fc:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     300:	08 95       	ret

00000302 <__subsf3>:
     302:	50 58       	subi	r21, 0x80	; 128

00000304 <__addsf3>:
     304:	bb 27       	eor	r27, r27
     306:	aa 27       	eor	r26, r26
     308:	0e d0       	rcall	.+28     	; 0x326 <__addsf3x>
     30a:	77 c0       	rjmp	.+238    	; 0x3fa <__fp_round>
     30c:	68 d0       	rcall	.+208    	; 0x3de <__fp_pscA>
     30e:	30 f0       	brcs	.+12     	; 0x31c <__addsf3+0x18>
     310:	6d d0       	rcall	.+218    	; 0x3ec <__fp_pscB>
     312:	20 f0       	brcs	.+8      	; 0x31c <__addsf3+0x18>
     314:	31 f4       	brne	.+12     	; 0x322 <__addsf3+0x1e>
     316:	9f 3f       	cpi	r25, 0xFF	; 255
     318:	11 f4       	brne	.+4      	; 0x31e <__addsf3+0x1a>
     31a:	1e f4       	brtc	.+6      	; 0x322 <__addsf3+0x1e>
     31c:	5d c0       	rjmp	.+186    	; 0x3d8 <__fp_nan>
     31e:	0e f4       	brtc	.+2      	; 0x322 <__addsf3+0x1e>
     320:	e0 95       	com	r30
     322:	e7 fb       	bst	r30, 7
     324:	53 c0       	rjmp	.+166    	; 0x3cc <__fp_inf>

00000326 <__addsf3x>:
     326:	e9 2f       	mov	r30, r25
     328:	79 d0       	rcall	.+242    	; 0x41c <__fp_split3>
     32a:	80 f3       	brcs	.-32     	; 0x30c <__addsf3+0x8>
     32c:	ba 17       	cp	r27, r26
     32e:	62 07       	cpc	r22, r18
     330:	73 07       	cpc	r23, r19
     332:	84 07       	cpc	r24, r20
     334:	95 07       	cpc	r25, r21
     336:	18 f0       	brcs	.+6      	; 0x33e <__addsf3x+0x18>
     338:	71 f4       	brne	.+28     	; 0x356 <__addsf3x+0x30>
     33a:	9e f5       	brtc	.+102    	; 0x3a2 <__addsf3x+0x7c>
     33c:	91 c0       	rjmp	.+290    	; 0x460 <__fp_zero>
     33e:	0e f4       	brtc	.+2      	; 0x342 <__addsf3x+0x1c>
     340:	e0 95       	com	r30
     342:	0b 2e       	mov	r0, r27
     344:	ba 2f       	mov	r27, r26
     346:	a0 2d       	mov	r26, r0
     348:	0b 01       	movw	r0, r22
     34a:	b9 01       	movw	r22, r18
     34c:	90 01       	movw	r18, r0
     34e:	0c 01       	movw	r0, r24
     350:	ca 01       	movw	r24, r20
     352:	a0 01       	movw	r20, r0
     354:	11 24       	eor	r1, r1
     356:	ff 27       	eor	r31, r31
     358:	59 1b       	sub	r21, r25
     35a:	99 f0       	breq	.+38     	; 0x382 <__addsf3x+0x5c>
     35c:	59 3f       	cpi	r21, 0xF9	; 249
     35e:	50 f4       	brcc	.+20     	; 0x374 <__addsf3x+0x4e>
     360:	50 3e       	cpi	r21, 0xE0	; 224
     362:	68 f1       	brcs	.+90     	; 0x3be <__addsf3x+0x98>
     364:	1a 16       	cp	r1, r26
     366:	f0 40       	sbci	r31, 0x00	; 0
     368:	a2 2f       	mov	r26, r18
     36a:	23 2f       	mov	r18, r19
     36c:	34 2f       	mov	r19, r20
     36e:	44 27       	eor	r20, r20
     370:	58 5f       	subi	r21, 0xF8	; 248
     372:	f3 cf       	rjmp	.-26     	; 0x35a <__addsf3x+0x34>
     374:	46 95       	lsr	r20
     376:	37 95       	ror	r19
     378:	27 95       	ror	r18
     37a:	a7 95       	ror	r26
     37c:	f0 40       	sbci	r31, 0x00	; 0
     37e:	53 95       	inc	r21
     380:	c9 f7       	brne	.-14     	; 0x374 <__addsf3x+0x4e>
     382:	7e f4       	brtc	.+30     	; 0x3a2 <__addsf3x+0x7c>
     384:	1f 16       	cp	r1, r31
     386:	ba 0b       	sbc	r27, r26
     388:	62 0b       	sbc	r22, r18
     38a:	73 0b       	sbc	r23, r19
     38c:	84 0b       	sbc	r24, r20
     38e:	ba f0       	brmi	.+46     	; 0x3be <__addsf3x+0x98>
     390:	91 50       	subi	r25, 0x01	; 1
     392:	a1 f0       	breq	.+40     	; 0x3bc <__addsf3x+0x96>
     394:	ff 0f       	add	r31, r31
     396:	bb 1f       	adc	r27, r27
     398:	66 1f       	adc	r22, r22
     39a:	77 1f       	adc	r23, r23
     39c:	88 1f       	adc	r24, r24
     39e:	c2 f7       	brpl	.-16     	; 0x390 <__addsf3x+0x6a>
     3a0:	0e c0       	rjmp	.+28     	; 0x3be <__addsf3x+0x98>
     3a2:	ba 0f       	add	r27, r26
     3a4:	62 1f       	adc	r22, r18
     3a6:	73 1f       	adc	r23, r19
     3a8:	84 1f       	adc	r24, r20
     3aa:	48 f4       	brcc	.+18     	; 0x3be <__addsf3x+0x98>
     3ac:	87 95       	ror	r24
     3ae:	77 95       	ror	r23
     3b0:	67 95       	ror	r22
     3b2:	b7 95       	ror	r27
     3b4:	f7 95       	ror	r31
     3b6:	9e 3f       	cpi	r25, 0xFE	; 254
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <__addsf3x+0x96>
     3ba:	b3 cf       	rjmp	.-154    	; 0x322 <__addsf3+0x1e>
     3bc:	93 95       	inc	r25
     3be:	88 0f       	add	r24, r24
     3c0:	08 f0       	brcs	.+2      	; 0x3c4 <__addsf3x+0x9e>
     3c2:	99 27       	eor	r25, r25
     3c4:	ee 0f       	add	r30, r30
     3c6:	97 95       	ror	r25
     3c8:	87 95       	ror	r24
     3ca:	08 95       	ret

000003cc <__fp_inf>:
     3cc:	97 f9       	bld	r25, 7
     3ce:	9f 67       	ori	r25, 0x7F	; 127
     3d0:	80 e8       	ldi	r24, 0x80	; 128
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	08 95       	ret

000003d8 <__fp_nan>:
     3d8:	9f ef       	ldi	r25, 0xFF	; 255
     3da:	80 ec       	ldi	r24, 0xC0	; 192
     3dc:	08 95       	ret

000003de <__fp_pscA>:
     3de:	00 24       	eor	r0, r0
     3e0:	0a 94       	dec	r0
     3e2:	16 16       	cp	r1, r22
     3e4:	17 06       	cpc	r1, r23
     3e6:	18 06       	cpc	r1, r24
     3e8:	09 06       	cpc	r0, r25
     3ea:	08 95       	ret

000003ec <__fp_pscB>:
     3ec:	00 24       	eor	r0, r0
     3ee:	0a 94       	dec	r0
     3f0:	12 16       	cp	r1, r18
     3f2:	13 06       	cpc	r1, r19
     3f4:	14 06       	cpc	r1, r20
     3f6:	05 06       	cpc	r0, r21
     3f8:	08 95       	ret

000003fa <__fp_round>:
     3fa:	09 2e       	mov	r0, r25
     3fc:	03 94       	inc	r0
     3fe:	00 0c       	add	r0, r0
     400:	11 f4       	brne	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	88 23       	and	r24, r24
     404:	52 f0       	brmi	.+20     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     406:	bb 0f       	add	r27, r27
     408:	40 f4       	brcc	.+16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40a:	bf 2b       	or	r27, r31
     40c:	11 f4       	brne	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	60 ff       	sbrs	r22, 0
     410:	04 c0       	rjmp	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     412:	6f 5f       	subi	r22, 0xFF	; 255
     414:	7f 4f       	sbci	r23, 0xFF	; 255
     416:	8f 4f       	sbci	r24, 0xFF	; 255
     418:	9f 4f       	sbci	r25, 0xFF	; 255
     41a:	08 95       	ret

0000041c <__fp_split3>:
     41c:	57 fd       	sbrc	r21, 7
     41e:	90 58       	subi	r25, 0x80	; 128
     420:	44 0f       	add	r20, r20
     422:	55 1f       	adc	r21, r21
     424:	59 f0       	breq	.+22     	; 0x43c <__fp_splitA+0x10>
     426:	5f 3f       	cpi	r21, 0xFF	; 255
     428:	71 f0       	breq	.+28     	; 0x446 <__fp_splitA+0x1a>
     42a:	47 95       	ror	r20

0000042c <__fp_splitA>:
     42c:	88 0f       	add	r24, r24
     42e:	97 fb       	bst	r25, 7
     430:	99 1f       	adc	r25, r25
     432:	61 f0       	breq	.+24     	; 0x44c <__fp_splitA+0x20>
     434:	9f 3f       	cpi	r25, 0xFF	; 255
     436:	79 f0       	breq	.+30     	; 0x456 <__fp_splitA+0x2a>
     438:	87 95       	ror	r24
     43a:	08 95       	ret
     43c:	12 16       	cp	r1, r18
     43e:	13 06       	cpc	r1, r19
     440:	14 06       	cpc	r1, r20
     442:	55 1f       	adc	r21, r21
     444:	f2 cf       	rjmp	.-28     	; 0x42a <__fp_split3+0xe>
     446:	46 95       	lsr	r20
     448:	f1 df       	rcall	.-30     	; 0x42c <__fp_splitA>
     44a:	08 c0       	rjmp	.+16     	; 0x45c <__fp_splitA+0x30>
     44c:	16 16       	cp	r1, r22
     44e:	17 06       	cpc	r1, r23
     450:	18 06       	cpc	r1, r24
     452:	99 1f       	adc	r25, r25
     454:	f1 cf       	rjmp	.-30     	; 0x438 <__fp_splitA+0xc>
     456:	86 95       	lsr	r24
     458:	71 05       	cpc	r23, r1
     45a:	61 05       	cpc	r22, r1
     45c:	08 94       	sec
     45e:	08 95       	ret

00000460 <__fp_zero>:
     460:	e8 94       	clt

00000462 <__fp_szero>:
     462:	bb 27       	eor	r27, r27
     464:	66 27       	eor	r22, r22
     466:	77 27       	eor	r23, r23
     468:	cb 01       	movw	r24, r22
     46a:	97 f9       	bld	r25, 7
     46c:	08 95       	ret

0000046e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     46e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     470:	91 8d       	ldd	r25, Z+25	; 0x19
     472:	22 8d       	ldd	r18, Z+26	; 0x1a
     474:	89 2f       	mov	r24, r25
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	80 5c       	subi	r24, 0xC0	; 192
     47a:	9f 4f       	sbci	r25, 0xFF	; 255
     47c:	82 1b       	sub	r24, r18
     47e:	91 09       	sbc	r25, r1
}
     480:	8f 73       	andi	r24, 0x3F	; 63
     482:	99 27       	eor	r25, r25
     484:	08 95       	ret

00000486 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     486:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     488:	91 8d       	ldd	r25, Z+25	; 0x19
     48a:	82 8d       	ldd	r24, Z+26	; 0x1a
     48c:	98 17       	cp	r25, r24
     48e:	31 f0       	breq	.+12     	; 0x49c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     490:	82 8d       	ldd	r24, Z+26	; 0x1a
     492:	e8 0f       	add	r30, r24
     494:	f1 1d       	adc	r31, r1
     496:	85 8d       	ldd	r24, Z+29	; 0x1d
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     4a0:	08 95       	ret

000004a2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     4a2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     4a4:	91 8d       	ldd	r25, Z+25	; 0x19
     4a6:	82 8d       	ldd	r24, Z+26	; 0x1a
     4a8:	98 17       	cp	r25, r24
     4aa:	61 f0       	breq	.+24     	; 0x4c4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     4ac:	82 8d       	ldd	r24, Z+26	; 0x1a
     4ae:	df 01       	movw	r26, r30
     4b0:	a8 0f       	add	r26, r24
     4b2:	b1 1d       	adc	r27, r1
     4b4:	5d 96       	adiw	r26, 0x1d	; 29
     4b6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     4b8:	92 8d       	ldd	r25, Z+26	; 0x1a
     4ba:	9f 5f       	subi	r25, 0xFF	; 255
     4bc:	9f 73       	andi	r25, 0x3F	; 63
     4be:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     4c8:	08 95       	ret

000004ca <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     4ca:	fc 01       	movw	r30, r24
     4cc:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     4ce:	44 8d       	ldd	r20, Z+28	; 0x1c
     4d0:	25 2f       	mov	r18, r21
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	84 2f       	mov	r24, r20
     4d6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     4d8:	82 1b       	sub	r24, r18
     4da:	93 0b       	sbc	r25, r19
     4dc:	54 17       	cp	r21, r20
     4de:	10 f0       	brcs	.+4      	; 0x4e4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     4e0:	cf 96       	adiw	r24, 0x3f	; 63
     4e2:	08 95       	ret
  return tail - head - 1;
     4e4:	01 97       	sbiw	r24, 0x01	; 1
}
     4e6:	08 95       	ret

000004e8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	94 e0       	ldi	r25, 0x04	; 4
     4ec:	89 2b       	or	r24, r25
     4ee:	39 f0       	breq	.+14     	; 0x4fe <_Z14serialEventRunv+0x16>
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	19 f0       	breq	.+6      	; 0x4fe <_Z14serialEventRunv+0x16>
     4f8:	84 d1       	rcall	.+776    	; 0x802 <_Z17Serial0_availablev>
     4fa:	81 11       	cpse	r24, r1
     4fc:	25 c0       	rjmp	.+74     	; 0x548 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	89 2b       	or	r24, r25
     504:	41 f0       	breq	.+16     	; 0x516 <_Z14serialEventRunv+0x2e>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	89 2b       	or	r24, r25
     50c:	21 f0       	breq	.+8      	; 0x516 <_Z14serialEventRunv+0x2e>
     50e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     512:	81 11       	cpse	r24, r1
     514:	1c c0       	rjmp	.+56     	; 0x54e <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	89 2b       	or	r24, r25
     51c:	41 f0       	breq	.+16     	; 0x52e <_Z14serialEventRunv+0x46>
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	89 2b       	or	r24, r25
     524:	21 f0       	breq	.+8      	; 0x52e <_Z14serialEventRunv+0x46>
     526:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     52a:	81 11       	cpse	r24, r1
     52c:	13 c0       	rjmp	.+38     	; 0x554 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	89 2b       	or	r24, r25
     534:	a1 f0       	breq	.+40     	; 0x55e <_Z14serialEventRunv+0x76>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	89 2b       	or	r24, r25
     53c:	81 f0       	breq	.+32     	; 0x55e <_Z14serialEventRunv+0x76>
     53e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     542:	81 11       	cpse	r24, r1
     544:	0a c0       	rjmp	.+20     	; 0x55a <_Z14serialEventRunv+0x72>
     546:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     548:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     54c:	d8 cf       	rjmp	.-80     	; 0x4fe <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     54e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     552:	e1 cf       	rjmp	.-62     	; 0x516 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     554:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     558:	ea cf       	rjmp	.-44     	; 0x52e <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     55a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     55e:	08 95       	ret

00000560 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     560:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     562:	84 8d       	ldd	r24, Z+28	; 0x1c
     564:	df 01       	movw	r26, r30
     566:	a8 0f       	add	r26, r24
     568:	b1 1d       	adc	r27, r1
     56a:	a3 5a       	subi	r26, 0xA3	; 163
     56c:	bf 4f       	sbci	r27, 0xFF	; 255
     56e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     570:	84 8d       	ldd	r24, Z+28	; 0x1c
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	8f 73       	andi	r24, 0x3F	; 63
     578:	99 27       	eor	r25, r25
     57a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     57c:	a6 89       	ldd	r26, Z+22	; 0x16
     57e:	b7 89       	ldd	r27, Z+23	; 0x17
     580:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     582:	a0 89       	ldd	r26, Z+16	; 0x10
     584:	b1 89       	ldd	r27, Z+17	; 0x11
     586:	8c 91       	ld	r24, X
     588:	83 70       	andi	r24, 0x03	; 3
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     58e:	93 8d       	ldd	r25, Z+27	; 0x1b
     590:	84 8d       	ldd	r24, Z+28	; 0x1c
     592:	98 13       	cpse	r25, r24
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     596:	02 88       	ldd	r0, Z+18	; 0x12
     598:	f3 89       	ldd	r31, Z+19	; 0x13
     59a:	e0 2d       	mov	r30, r0
     59c:	80 81       	ld	r24, Z
     59e:	8f 7d       	andi	r24, 0xDF	; 223
     5a0:	80 83       	st	Z, r24
     5a2:	08 95       	ret

000005a4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
  _written = true;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5ba:	98 13       	cpse	r25, r24
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <_ZN14HardwareSerial5writeEh+0x24>
     5be:	e8 89       	ldd	r30, Y+16	; 0x10
     5c0:	f9 89       	ldd	r31, Y+17	; 0x11
     5c2:	80 81       	ld	r24, Z
     5c4:	85 fd       	sbrc	r24, 5
     5c6:	25 c0       	rjmp	.+74     	; 0x612 <_ZN14HardwareSerial5writeEh+0x6e>
     5c8:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     5ca:	0b 8d       	ldd	r16, Y+27	; 0x1b
     5cc:	10 e0       	ldi	r17, 0x00	; 0
     5ce:	0f 5f       	subi	r16, 0xFF	; 255
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	0f 73       	andi	r16, 0x3F	; 63
     5d4:	11 27       	eor	r17, r17
     5d6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     5d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5da:	e8 12       	cpse	r14, r24
     5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	07 fc       	sbrc	r0, 7
     5e2:	fa cf       	rjmp	.-12     	; 0x5d8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     5e4:	e8 89       	ldd	r30, Y+16	; 0x10
     5e6:	f9 89       	ldd	r31, Y+17	; 0x11
     5e8:	80 81       	ld	r24, Z
     5ea:	85 ff       	sbrs	r24, 5
     5ec:	f5 cf       	rjmp	.-22     	; 0x5d8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     5ee:	ce 01       	movw	r24, r28
     5f0:	b7 df       	rcall	.-146    	; 0x560 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     5f2:	f2 cf       	rjmp	.-28     	; 0x5d8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     5f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5f6:	fe 01       	movw	r30, r28
     5f8:	e8 0f       	add	r30, r24
     5fa:	f1 1d       	adc	r31, r1
     5fc:	e3 5a       	subi	r30, 0xA3	; 163
     5fe:	ff 4f       	sbci	r31, 0xFF	; 255
     600:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     602:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     604:	f8 94       	cli
    _tx_buffer_head = i;
     606:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     608:	ea 89       	ldd	r30, Y+18	; 0x12
     60a:	fb 89       	ldd	r31, Y+19	; 0x13
     60c:	80 81       	ld	r24, Z
     60e:	80 62       	ori	r24, 0x20	; 32
     610:	0a c0       	rjmp	.+20     	; 0x626 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     612:	9f b7       	in	r25, 0x3f	; 63
     614:	f8 94       	cli
      *_udr = c;
     616:	ee 89       	ldd	r30, Y+22	; 0x16
     618:	ff 89       	ldd	r31, Y+23	; 0x17
     61a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     61c:	e8 89       	ldd	r30, Y+16	; 0x10
     61e:	f9 89       	ldd	r31, Y+17	; 0x11
     620:	80 81       	ld	r24, Z
     622:	83 70       	andi	r24, 0x03	; 3
     624:	80 64       	ori	r24, 0x40	; 64
     626:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     628:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
     63a:	08 95       	ret

0000063c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     642:	88 8d       	ldd	r24, Y+24	; 0x18
     644:	88 23       	and	r24, r24
     646:	c1 f0       	breq	.+48     	; 0x678 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     648:	ea 89       	ldd	r30, Y+18	; 0x12
     64a:	fb 89       	ldd	r31, Y+19	; 0x13
     64c:	80 81       	ld	r24, Z
     64e:	85 fd       	sbrc	r24, 5
     650:	05 c0       	rjmp	.+10     	; 0x65c <_ZN14HardwareSerial5flushEv+0x20>
     652:	a8 89       	ldd	r26, Y+16	; 0x10
     654:	b9 89       	ldd	r27, Y+17	; 0x11
     656:	8c 91       	ld	r24, X
     658:	86 fd       	sbrc	r24, 6
     65a:	0e c0       	rjmp	.+28     	; 0x678 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	07 fc       	sbrc	r0, 7
     660:	f5 cf       	rjmp	.-22     	; 0x64c <_ZN14HardwareSerial5flushEv+0x10>
     662:	80 81       	ld	r24, Z
     664:	85 ff       	sbrs	r24, 5
     666:	f2 cf       	rjmp	.-28     	; 0x64c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     668:	a8 89       	ldd	r26, Y+16	; 0x10
     66a:	b9 89       	ldd	r27, Y+17	; 0x11
     66c:	8c 91       	ld	r24, X
     66e:	85 ff       	sbrs	r24, 5
     670:	ed cf       	rjmp	.-38     	; 0x64c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     672:	ce 01       	movw	r24, r28
     674:	75 df       	rcall	.-278    	; 0x560 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     676:	e8 cf       	rjmp	.-48     	; 0x648 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
     68e:	6a 01       	movw	r12, r20
     690:	7b 01       	movw	r14, r22
     692:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     694:	e8 89       	ldd	r30, Y+16	; 0x10
     696:	f9 89       	ldd	r31, Y+17	; 0x11
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     69c:	41 15       	cp	r20, r1
     69e:	51 4e       	sbci	r21, 0xE1	; 225
     6a0:	61 05       	cpc	r22, r1
     6a2:	71 05       	cpc	r23, r1
     6a4:	a9 f0       	breq	.+42     	; 0x6d0 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	79 e0       	ldi	r23, 0x09	; 9
     6aa:	8d e3       	ldi	r24, 0x3D	; 61
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	a7 01       	movw	r20, r14
     6b0:	96 01       	movw	r18, r12
     6b2:	21 d5       	rcall	.+2626   	; 0x10f6 <__udivmodsi4>
     6b4:	da 01       	movw	r26, r20
     6b6:	c9 01       	movw	r24, r18
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	a1 09       	sbc	r26, r1
     6bc:	b1 09       	sbc	r27, r1
     6be:	b6 95       	lsr	r27
     6c0:	a7 95       	ror	r26
     6c2:	97 95       	ror	r25
     6c4:	87 95       	ror	r24
     6c6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     6c8:	21 15       	cp	r18, r1
     6ca:	80 e1       	ldi	r24, 0x10	; 16
     6cc:	38 07       	cpc	r19, r24
     6ce:	a0 f0       	brcs	.+40     	; 0x6f8 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     6d0:	e8 89       	ldd	r30, Y+16	; 0x10
     6d2:	f9 89       	ldd	r31, Y+17	; 0x11
     6d4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     6d6:	60 e8       	ldi	r22, 0x80	; 128
     6d8:	74 e8       	ldi	r23, 0x84	; 132
     6da:	8e e1       	ldi	r24, 0x1E	; 30
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	a7 01       	movw	r20, r14
     6e0:	96 01       	movw	r18, r12
     6e2:	09 d5       	rcall	.+2578   	; 0x10f6 <__udivmodsi4>
     6e4:	da 01       	movw	r26, r20
     6e6:	c9 01       	movw	r24, r18
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	a1 09       	sbc	r26, r1
     6ec:	b1 09       	sbc	r27, r1
     6ee:	b6 95       	lsr	r27
     6f0:	a7 95       	ror	r26
     6f2:	97 95       	ror	r25
     6f4:	87 95       	ror	r24
     6f6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     6f8:	ec 85       	ldd	r30, Y+12	; 0x0c
     6fa:	fd 85       	ldd	r31, Y+13	; 0x0d
     6fc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     6fe:	ee 85       	ldd	r30, Y+14	; 0x0e
     700:	ff 85       	ldd	r31, Y+15	; 0x0f
     702:	20 83       	st	Z, r18

  _written = false;
     704:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     706:	ec 89       	ldd	r30, Y+20	; 0x14
     708:	fd 89       	ldd	r31, Y+21	; 0x15
     70a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     70c:	ea 89       	ldd	r30, Y+18	; 0x12
     70e:	fb 89       	ldd	r31, Y+19	; 0x13
     710:	80 81       	ld	r24, Z
     712:	80 61       	ori	r24, 0x10	; 16
     714:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     716:	ea 89       	ldd	r30, Y+18	; 0x12
     718:	fb 89       	ldd	r31, Y+19	; 0x13
     71a:	80 81       	ld	r24, Z
     71c:	88 60       	ori	r24, 0x08	; 8
     71e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     720:	ea 89       	ldd	r30, Y+18	; 0x12
     722:	fb 89       	ldd	r31, Y+19	; 0x13
     724:	80 81       	ld	r24, Z
     726:	80 68       	ori	r24, 0x80	; 128
     728:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     72a:	ea 89       	ldd	r30, Y+18	; 0x12
     72c:	fb 89       	ldd	r31, Y+19	; 0x13
     72e:	80 81       	ld	r24, Z
     730:	8f 7d       	andi	r24, 0xDF	; 223
     732:	80 83       	st	Z, r24
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	08 95       	ret

00000744 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     744:	1f 92       	push	r1
     746:	0f 92       	push	r0
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	0f 92       	push	r0
     74c:	11 24       	eor	r1, r1
     74e:	0b b6       	in	r0, 0x3b	; 59
     750:	0f 92       	push	r0
     752:	2f 93       	push	r18
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	ef 93       	push	r30
     75a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     75c:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <__data_end+0x10>
     760:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <__data_end+0x11>
     764:	80 81       	ld	r24, Z
     766:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__data_end+0x16>
     76a:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <__data_end+0x17>
     76e:	82 fd       	sbrc	r24, 2
     770:	12 c0       	rjmp	.+36     	; 0x796 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     772:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     774:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__data_end+0x19>
     778:	8f 5f       	subi	r24, 0xFF	; 255
     77a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     77c:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <__data_end+0x1a>
     780:	82 17       	cp	r24, r18
     782:	51 f0       	breq	.+20     	; 0x798 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     784:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <__data_end+0x19>
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	e2 5a       	subi	r30, 0xA2	; 162
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
     78e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     790:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <__data_end+0x19>
     794:	01 c0       	rjmp	.+2      	; 0x798 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     796:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	2f 91       	pop	r18
     7a2:	0f 90       	pop	r0
     7a4:	0b be       	out	0x3b, r0	; 59
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     7d6:	8e e5       	ldi	r24, 0x5E	; 94
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	c2 de       	rcall	.-636    	; 0x560 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0b be       	out	0x3b, r0	; 59
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	0f 90       	pop	r0
     7fe:	1f 90       	pop	r1
     800:	18 95       	reti

00000802 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     802:	8e e5       	ldi	r24, 0x5E	; 94
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	33 de       	rcall	.-922    	; 0x46e <_ZN14HardwareSerial9availableEv>
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	89 2b       	or	r24, r25
     80c:	09 f4       	brne	.+2      	; 0x810 <_Z17Serial0_availablev+0xe>
     80e:	20 e0       	ldi	r18, 0x00	; 0
}
     810:	82 2f       	mov	r24, r18
     812:	08 95       	ret

00000814 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     814:	ee e5       	ldi	r30, 0x5E	; 94
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	13 82       	std	Z+3, r1	; 0x03
     81a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     81c:	88 ee       	ldi	r24, 0xE8	; 232
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	84 83       	std	Z+4, r24	; 0x04
     826:	95 83       	std	Z+5, r25	; 0x05
     828:	a6 83       	std	Z+6, r26	; 0x06
     82a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
     834:	85 ec       	ldi	r24, 0xC5	; 197
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	95 87       	std	Z+13, r25	; 0x0d
     83a:	84 87       	std	Z+12, r24	; 0x0c
     83c:	84 ec       	ldi	r24, 0xC4	; 196
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	97 87       	std	Z+15, r25	; 0x0f
     842:	86 87       	std	Z+14, r24	; 0x0e
     844:	80 ec       	ldi	r24, 0xC0	; 192
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	91 8b       	std	Z+17, r25	; 0x11
     84a:	80 8b       	std	Z+16, r24	; 0x10
     84c:	81 ec       	ldi	r24, 0xC1	; 193
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	93 8b       	std	Z+19, r25	; 0x13
     852:	82 8b       	std	Z+18, r24	; 0x12
     854:	82 ec       	ldi	r24, 0xC2	; 194
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	95 8b       	std	Z+21, r25	; 0x15
     85a:	84 8b       	std	Z+20, r24	; 0x14
     85c:	86 ec       	ldi	r24, 0xC6	; 198
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	97 8b       	std	Z+23, r25	; 0x17
     862:	86 8b       	std	Z+22, r24	; 0x16
     864:	11 8e       	std	Z+25, r1	; 0x19
     866:	12 8e       	std	Z+26, r1	; 0x1a
     868:	13 8e       	std	Z+27, r1	; 0x1b
     86a:	14 8e       	std	Z+28, r1	; 0x1c
     86c:	08 95       	ret

0000086e <initVariant>:
     86e:	08 95       	ret

00000870 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     870:	7b d2       	rcall	.+1270   	; 0xd68 <init>

	initVariant();
     872:	fd df       	rcall	.-6      	; 0x86e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     874:	69 dc       	rcall	.-1838   	; 0x148 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     876:	c4 e7       	ldi	r28, 0x74	; 116
     878:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     87a:	6e dc       	rcall	.-1828   	; 0x158 <loop>
		if (serialEventRun) serialEventRun();
     87c:	20 97       	sbiw	r28, 0x00	; 0
     87e:	e9 f3       	breq	.-6      	; 0x87a <main+0xa>
     880:	33 de       	rcall	.-922    	; 0x4e8 <_Z14serialEventRunv>
     882:	fb cf       	rjmp	.-10     	; 0x87a <main+0xa>

00000884 <_ZN5Print5writeEPKhj>:
     884:	cf 92       	push	r12
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	6c 01       	movw	r12, r24
     896:	7a 01       	movw	r14, r20
     898:	8b 01       	movw	r16, r22
     89a:	c0 e0       	ldi	r28, 0x00	; 0
     89c:	d0 e0       	ldi	r29, 0x00	; 0
     89e:	ce 15       	cp	r28, r14
     8a0:	df 05       	cpc	r29, r15
     8a2:	81 f0       	breq	.+32     	; 0x8c4 <_ZN5Print5writeEPKhj+0x40>
     8a4:	d8 01       	movw	r26, r16
     8a6:	6d 91       	ld	r22, X+
     8a8:	8d 01       	movw	r16, r26
     8aa:	d6 01       	movw	r26, r12
     8ac:	ed 91       	ld	r30, X+
     8ae:	fc 91       	ld	r31, X
     8b0:	01 90       	ld	r0, Z+
     8b2:	f0 81       	ld	r31, Z
     8b4:	e0 2d       	mov	r30, r0
     8b6:	c6 01       	movw	r24, r12
     8b8:	19 95       	eicall
     8ba:	89 2b       	or	r24, r25
     8bc:	11 f0       	breq	.+4      	; 0x8c2 <_ZN5Print5writeEPKhj+0x3e>
     8be:	21 96       	adiw	r28, 0x01	; 1
     8c0:	ee cf       	rjmp	.-36     	; 0x89e <_ZN5Print5writeEPKhj+0x1a>
     8c2:	7e 01       	movw	r14, r28
     8c4:	c7 01       	movw	r24, r14
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	08 95       	ret

000008d8 <_ZN5Print5writeEPKc>:
     8d8:	61 15       	cp	r22, r1
     8da:	71 05       	cpc	r23, r1
     8dc:	79 f0       	breq	.+30     	; 0x8fc <_ZN5Print5writeEPKc+0x24>
     8de:	fb 01       	movw	r30, r22
     8e0:	01 90       	ld	r0, Z+
     8e2:	00 20       	and	r0, r0
     8e4:	e9 f7       	brne	.-6      	; 0x8e0 <_ZN5Print5writeEPKc+0x8>
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	af 01       	movw	r20, r30
     8ea:	46 1b       	sub	r20, r22
     8ec:	57 0b       	sbc	r21, r23
     8ee:	dc 01       	movw	r26, r24
     8f0:	ed 91       	ld	r30, X+
     8f2:	fc 91       	ld	r31, X
     8f4:	02 80       	ldd	r0, Z+2	; 0x02
     8f6:	f3 81       	ldd	r31, Z+3	; 0x03
     8f8:	e0 2d       	mov	r30, r0
     8fa:	19 94       	eijmp
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	08 95       	ret

00000902 <_ZN5Print5printEPKc>:
     902:	ea cf       	rjmp	.-44     	; 0x8d8 <_ZN5Print5writeEPKc>

00000904 <_ZN5Print5printEc>:
     904:	dc 01       	movw	r26, r24
     906:	ed 91       	ld	r30, X+
     908:	fc 91       	ld	r31, X
     90a:	01 90       	ld	r0, Z+
     90c:	f0 81       	ld	r31, Z
     90e:	e0 2d       	mov	r30, r0
     910:	19 94       	eijmp

00000912 <_ZN5Print7printlnEv>:
     912:	6e e4       	ldi	r22, 0x4E	; 78
     914:	72 e0       	ldi	r23, 0x02	; 2
     916:	e0 cf       	rjmp	.-64     	; 0x8d8 <_ZN5Print5writeEPKc>

00000918 <_ZN5Print11printNumberEmh>:
     918:	8f 92       	push	r8
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	a1 97       	sbiw	r28, 0x21	; 33
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	7c 01       	movw	r14, r24
     93e:	fa 01       	movw	r30, r20
     940:	cb 01       	movw	r24, r22
     942:	19 a2       	std	Y+33, r1	; 0x21
     944:	22 30       	cpi	r18, 0x02	; 2
     946:	08 f4       	brcc	.+2      	; 0x94a <_ZN5Print11printNumberEmh+0x32>
     948:	2a e0       	ldi	r18, 0x0A	; 10
     94a:	8e 01       	movw	r16, r28
     94c:	0f 5d       	subi	r16, 0xDF	; 223
     94e:	1f 4f       	sbci	r17, 0xFF	; 255
     950:	82 2e       	mov	r8, r18
     952:	91 2c       	mov	r9, r1
     954:	a1 2c       	mov	r10, r1
     956:	b1 2c       	mov	r11, r1
     958:	bf 01       	movw	r22, r30
     95a:	a5 01       	movw	r20, r10
     95c:	94 01       	movw	r18, r8
     95e:	cb d3       	rcall	.+1942   	; 0x10f6 <__udivmodsi4>
     960:	f9 01       	movw	r30, r18
     962:	ca 01       	movw	r24, r20
     964:	01 50       	subi	r16, 0x01	; 1
     966:	11 09       	sbc	r17, r1
     968:	6a 30       	cpi	r22, 0x0A	; 10
     96a:	10 f4       	brcc	.+4      	; 0x970 <_ZN5Print11printNumberEmh+0x58>
     96c:	60 5d       	subi	r22, 0xD0	; 208
     96e:	01 c0       	rjmp	.+2      	; 0x972 <_ZN5Print11printNumberEmh+0x5a>
     970:	69 5c       	subi	r22, 0xC9	; 201
     972:	d8 01       	movw	r26, r16
     974:	6c 93       	st	X, r22
     976:	23 2b       	or	r18, r19
     978:	24 2b       	or	r18, r20
     97a:	25 2b       	or	r18, r21
     97c:	69 f7       	brne	.-38     	; 0x958 <_ZN5Print11printNumberEmh+0x40>
     97e:	b8 01       	movw	r22, r16
     980:	c7 01       	movw	r24, r14
     982:	aa df       	rcall	.-172    	; 0x8d8 <_ZN5Print5writeEPKc>
     984:	a1 96       	adiw	r28, 0x21	; 33
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	08 95       	ret

000009a6 <_ZN5Print5printEmi>:
     9a6:	21 15       	cp	r18, r1
     9a8:	31 05       	cpc	r19, r1
     9aa:	41 f4       	brne	.+16     	; 0x9bc <_ZN5Print5printEmi+0x16>
     9ac:	dc 01       	movw	r26, r24
     9ae:	ed 91       	ld	r30, X+
     9b0:	fc 91       	ld	r31, X
     9b2:	01 90       	ld	r0, Z+
     9b4:	f0 81       	ld	r31, Z
     9b6:	e0 2d       	mov	r30, r0
     9b8:	64 2f       	mov	r22, r20
     9ba:	19 94       	eijmp
     9bc:	ad cf       	rjmp	.-166    	; 0x918 <_ZN5Print11printNumberEmh>

000009be <_ZN5Print5printEhi>:
     9be:	9a 01       	movw	r18, r20
     9c0:	46 2f       	mov	r20, r22
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	ee cf       	rjmp	.-36     	; 0x9a6 <_ZN5Print5printEmi>

000009ca <_ZN5Print5printEji>:
     9ca:	9a 01       	movw	r18, r20
     9cc:	ab 01       	movw	r20, r22
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	e9 cf       	rjmp	.-46     	; 0x9a6 <_ZN5Print5printEmi>

000009d4 <_ZN5Print5printEli>:
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	21 15       	cp	r18, r1
     9e6:	31 05       	cpc	r19, r1
     9e8:	81 f4       	brne	.+32     	; 0xa0a <_ZN5Print5printEli+0x36>
     9ea:	dc 01       	movw	r26, r24
     9ec:	ed 91       	ld	r30, X+
     9ee:	fc 91       	ld	r31, X
     9f0:	01 90       	ld	r0, Z+
     9f2:	f0 81       	ld	r31, Z
     9f4:	e0 2d       	mov	r30, r0
     9f6:	64 2f       	mov	r22, r20
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	19 94       	eijmp
     a0a:	2a 30       	cpi	r18, 0x0A	; 10
     a0c:	31 05       	cpc	r19, r1
     a0e:	f1 f4       	brne	.+60     	; 0xa4c <_ZN5Print5printEli+0x78>
     a10:	77 ff       	sbrs	r23, 7
     a12:	1b c0       	rjmp	.+54     	; 0xa4a <_ZN5Print5printEli+0x76>
     a14:	6a 01       	movw	r12, r20
     a16:	7b 01       	movw	r14, r22
     a18:	ec 01       	movw	r28, r24
     a1a:	6d e2       	ldi	r22, 0x2D	; 45
     a1c:	73 df       	rcall	.-282    	; 0x904 <_ZN5Print5printEc>
     a1e:	8c 01       	movw	r16, r24
     a20:	44 27       	eor	r20, r20
     a22:	55 27       	eor	r21, r21
     a24:	ba 01       	movw	r22, r20
     a26:	4c 19       	sub	r20, r12
     a28:	5d 09       	sbc	r21, r13
     a2a:	6e 09       	sbc	r22, r14
     a2c:	7f 09       	sbc	r23, r15
     a2e:	2a e0       	ldi	r18, 0x0A	; 10
     a30:	ce 01       	movw	r24, r28
     a32:	72 df       	rcall	.-284    	; 0x918 <_ZN5Print11printNumberEmh>
     a34:	80 0f       	add	r24, r16
     a36:	91 1f       	adc	r25, r17
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret
     a4a:	2a e0       	ldi	r18, 0x0A	; 10
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	5d cf       	rjmp	.-326    	; 0x918 <_ZN5Print11printNumberEmh>

00000a5e <_ZN5Print5printEii>:
     a5e:	9a 01       	movw	r18, r20
     a60:	ab 01       	movw	r20, r22
     a62:	77 0f       	add	r23, r23
     a64:	66 0b       	sbc	r22, r22
     a66:	77 0b       	sbc	r23, r23
     a68:	b5 cf       	rjmp	.-150    	; 0x9d4 <_ZN5Print5printEli>

00000a6a <_ZN5Print10printFloatEdh>:
     a6a:	7f 92       	push	r7
     a6c:	8f 92       	push	r8
     a6e:	9f 92       	push	r9
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	8c 01       	movw	r16, r24
     a86:	6a 01       	movw	r12, r20
     a88:	7b 01       	movw	r14, r22
     a8a:	72 2e       	mov	r7, r18
     a8c:	9a 01       	movw	r18, r20
     a8e:	ab 01       	movw	r20, r22
     a90:	c7 01       	movw	r24, r14
     a92:	b6 01       	movw	r22, r12
     a94:	2c d3       	rcall	.+1624   	; 0x10ee <__unordsf2>
     a96:	88 23       	and	r24, r24
     a98:	19 f0       	breq	.+6      	; 0xaa0 <_ZN5Print10printFloatEdh+0x36>
     a9a:	61 e5       	ldi	r22, 0x51	; 81
     a9c:	72 e0       	ldi	r23, 0x02	; 2
     a9e:	24 c0       	rjmp	.+72     	; 0xae8 <_ZN5Print10printFloatEdh+0x7e>
     aa0:	46 01       	movw	r8, r12
     aa2:	57 01       	movw	r10, r14
     aa4:	e8 94       	clt
     aa6:	b7 f8       	bld	r11, 7
     aa8:	2f ef       	ldi	r18, 0xFF	; 255
     aaa:	3f ef       	ldi	r19, 0xFF	; 255
     aac:	4f e7       	ldi	r20, 0x7F	; 127
     aae:	5f e7       	ldi	r21, 0x7F	; 127
     ab0:	c5 01       	movw	r24, r10
     ab2:	b4 01       	movw	r22, r8
     ab4:	1c d3       	rcall	.+1592   	; 0x10ee <__unordsf2>
     ab6:	81 11       	cpse	r24, r1
     ab8:	0c c0       	rjmp	.+24     	; 0xad2 <_ZN5Print10printFloatEdh+0x68>
     aba:	2f ef       	ldi	r18, 0xFF	; 255
     abc:	3f ef       	ldi	r19, 0xFF	; 255
     abe:	4f e7       	ldi	r20, 0x7F	; 127
     ac0:	5f e7       	ldi	r21, 0x7F	; 127
     ac2:	c5 01       	movw	r24, r10
     ac4:	b4 01       	movw	r22, r8
     ac6:	b3 d1       	rcall	.+870    	; 0xe2e <__cmpsf2>
     ac8:	18 16       	cp	r1, r24
     aca:	1c f4       	brge	.+6      	; 0xad2 <_ZN5Print10printFloatEdh+0x68>
     acc:	65 e5       	ldi	r22, 0x55	; 85
     ace:	72 e0       	ldi	r23, 0x02	; 2
     ad0:	0b c0       	rjmp	.+22     	; 0xae8 <_ZN5Print10printFloatEdh+0x7e>
     ad2:	2f ef       	ldi	r18, 0xFF	; 255
     ad4:	3f ef       	ldi	r19, 0xFF	; 255
     ad6:	4f e7       	ldi	r20, 0x7F	; 127
     ad8:	5f e4       	ldi	r21, 0x4F	; 79
     ada:	c7 01       	movw	r24, r14
     adc:	b6 01       	movw	r22, r12
     ade:	a0 d2       	rcall	.+1344   	; 0x1020 <__gesf2>
     ae0:	18 16       	cp	r1, r24
     ae2:	8c f4       	brge	.+34     	; 0xb06 <_ZN5Print10printFloatEdh+0x9c>
     ae4:	69 e5       	ldi	r22, 0x59	; 89
     ae6:	72 e0       	ldi	r23, 0x02	; 2
     ae8:	c8 01       	movw	r24, r16
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	bf 90       	pop	r11
     afc:	af 90       	pop	r10
     afe:	9f 90       	pop	r9
     b00:	8f 90       	pop	r8
     b02:	7f 90       	pop	r7
     b04:	e9 ce       	rjmp	.-558    	; 0x8d8 <_ZN5Print5writeEPKc>
     b06:	2f ef       	ldi	r18, 0xFF	; 255
     b08:	3f ef       	ldi	r19, 0xFF	; 255
     b0a:	4f e7       	ldi	r20, 0x7F	; 127
     b0c:	5f ec       	ldi	r21, 0xCF	; 207
     b0e:	c7 01       	movw	r24, r14
     b10:	b6 01       	movw	r22, r12
     b12:	8d d1       	rcall	.+794    	; 0xe2e <__cmpsf2>
     b14:	87 fd       	sbrc	r24, 7
     b16:	e6 cf       	rjmp	.-52     	; 0xae4 <_ZN5Print10printFloatEdh+0x7a>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	a9 01       	movw	r20, r18
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	85 d1       	rcall	.+778    	; 0xe2e <__cmpsf2>
     b24:	87 ff       	sbrs	r24, 7
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <_ZN5Print10printFloatEdh+0xd0>
     b28:	6d e2       	ldi	r22, 0x2D	; 45
     b2a:	c8 01       	movw	r24, r16
     b2c:	eb de       	rcall	.-554    	; 0x904 <_ZN5Print5printEc>
     b2e:	ec 01       	movw	r28, r24
     b30:	f7 fa       	bst	r15, 7
     b32:	f0 94       	com	r15
     b34:	f7 f8       	bld	r15, 7
     b36:	f0 94       	com	r15
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <_ZN5Print10printFloatEdh+0xd4>
     b3a:	c0 e0       	ldi	r28, 0x00	; 0
     b3c:	d0 e0       	ldi	r29, 0x00	; 0
     b3e:	b1 2c       	mov	r11, r1
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	9f e3       	ldi	r25, 0x3F	; 63
     b48:	7b 14       	cp	r7, r11
     b4a:	39 f0       	breq	.+14     	; 0xb5a <_ZN5Print10printFloatEdh+0xf0>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e2       	ldi	r20, 0x20	; 32
     b52:	51 e4       	ldi	r21, 0x41	; 65
     b54:	70 d1       	rcall	.+736    	; 0xe36 <__divsf3>
     b56:	b3 94       	inc	r11
     b58:	f7 cf       	rjmp	.-18     	; 0xb48 <_ZN5Print10printFloatEdh+0xde>
     b5a:	a7 01       	movw	r20, r14
     b5c:	96 01       	movw	r18, r12
     b5e:	d2 db       	rcall	.-2140   	; 0x304 <__addsf3>
     b60:	6b 01       	movw	r12, r22
     b62:	7c 01       	movw	r14, r24
     b64:	d0 d1       	rcall	.+928    	; 0xf06 <__fixunssfsi>
     b66:	4b 01       	movw	r8, r22
     b68:	5c 01       	movw	r10, r24
     b6a:	2a e0       	ldi	r18, 0x0A	; 10
     b6c:	ab 01       	movw	r20, r22
     b6e:	bc 01       	movw	r22, r24
     b70:	c8 01       	movw	r24, r16
     b72:	d2 de       	rcall	.-604    	; 0x918 <_ZN5Print11printNumberEmh>
     b74:	c8 0f       	add	r28, r24
     b76:	d9 1f       	adc	r29, r25
     b78:	77 20       	and	r7, r7
     b7a:	79 f1       	breq	.+94     	; 0xbda <_ZN5Print10printFloatEdh+0x170>
     b7c:	c5 01       	movw	r24, r10
     b7e:	b4 01       	movw	r22, r8
     b80:	ee d1       	rcall	.+988    	; 0xf5e <__floatunsisf>
     b82:	9b 01       	movw	r18, r22
     b84:	ac 01       	movw	r20, r24
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	bb db       	rcall	.-2186   	; 0x302 <__subsf3>
     b8c:	6b 01       	movw	r12, r22
     b8e:	7c 01       	movw	r14, r24
     b90:	6e e2       	ldi	r22, 0x2E	; 46
     b92:	c8 01       	movw	r24, r16
     b94:	b7 de       	rcall	.-658    	; 0x904 <_ZN5Print5printEc>
     b96:	c8 0f       	add	r28, r24
     b98:	d9 1f       	adc	r29, r25
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e2       	ldi	r20, 0x20	; 32
     ba0:	51 e4       	ldi	r21, 0x41	; 65
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	40 d2       	rcall	.+1152   	; 0x1028 <__mulsf3>
     ba8:	4b 01       	movw	r8, r22
     baa:	5c 01       	movw	r10, r24
     bac:	ac d1       	rcall	.+856    	; 0xf06 <__fixunssfsi>
     bae:	6b 01       	movw	r12, r22
     bb0:	7c 01       	movw	r14, r24
     bb2:	4a e0       	ldi	r20, 0x0A	; 10
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	c8 01       	movw	r24, r16
     bb8:	08 df       	rcall	.-496    	; 0x9ca <_ZN5Print5printEji>
     bba:	c8 0f       	add	r28, r24
     bbc:	d9 1f       	adc	r29, r25
     bbe:	b6 01       	movw	r22, r12
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	cc d1       	rcall	.+920    	; 0xf5e <__floatunsisf>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	c5 01       	movw	r24, r10
     bcc:	b4 01       	movw	r22, r8
     bce:	99 db       	rcall	.-2254   	; 0x302 <__subsf3>
     bd0:	6b 01       	movw	r12, r22
     bd2:	7c 01       	movw	r14, r24
     bd4:	7a 94       	dec	r7
     bd6:	71 10       	cpse	r7, r1
     bd8:	e0 cf       	rjmp	.-64     	; 0xb9a <_ZN5Print10printFloatEdh+0x130>
     bda:	ce 01       	movw	r24, r28
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	7f 90       	pop	r7
     bf6:	08 95       	ret

00000bf8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     c02:	33 df       	rcall	.-410    	; 0xa6a <_ZN5Print10printFloatEdh>
     c04:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
     c06:	ce 01       	movw	r24, r28
     c08:	84 de       	rcall	.-760    	; 0x912 <_ZN5Print7printlnEv>
  return n;
}
     c0a:	80 0f       	add	r24, r16
     c0c:	91 1f       	adc	r25, r17
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     c18:	1f 92       	push	r1
     c1a:	0f 92       	push	r0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	0f 92       	push	r0
     c20:	11 24       	eor	r1, r1
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <timer0_millis>
     c32:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <timer0_millis+0x1>
     c36:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <timer0_millis+0x2>
     c3a:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <timer0_millis+0x3>
     c3e:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <timer0_fract>
     c42:	23 e0       	ldi	r18, 0x03	; 3
     c44:	23 0f       	add	r18, r19
     c46:	2d 37       	cpi	r18, 0x7D	; 125
     c48:	20 f4       	brcc	.+8      	; 0xc52 <__vector_23+0x3a>
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	a1 1d       	adc	r26, r1
     c4e:	b1 1d       	adc	r27, r1
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <__vector_23+0x44>
     c52:	26 e8       	ldi	r18, 0x86	; 134
     c54:	23 0f       	add	r18, r19
     c56:	02 96       	adiw	r24, 0x02	; 2
     c58:	a1 1d       	adc	r26, r1
     c5a:	b1 1d       	adc	r27, r1
     c5c:	20 93 fb 02 	sts	0x02FB, r18	; 0x8002fb <timer0_fract>
     c60:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <timer0_millis>
     c64:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <timer0_millis+0x1>
     c68:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <timer0_millis+0x2>
     c6c:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <timer0_millis+0x3>
     c70:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer0_overflow_count>
     c74:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer0_overflow_count+0x1>
     c78:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer0_overflow_count+0x2>
     c7c:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer0_overflow_count+0x3>
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	a1 1d       	adc	r26, r1
     c84:	b1 1d       	adc	r27, r1
     c86:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <timer0_overflow_count>
     c8a:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <timer0_overflow_count+0x1>
     c8e:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <timer0_overflow_count+0x2>
     c92:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <timer0_overflow_count+0x3>
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <micros>:
     cac:	3f b7       	in	r19, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer0_overflow_count>
     cb4:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer0_overflow_count+0x1>
     cb8:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer0_overflow_count+0x2>
     cbc:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer0_overflow_count+0x3>
     cc0:	26 b5       	in	r18, 0x26	; 38
     cc2:	a8 9b       	sbis	0x15, 0	; 21
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <micros+0x24>
     cc6:	2f 3f       	cpi	r18, 0xFF	; 255
     cc8:	19 f0       	breq	.+6      	; 0xcd0 <micros+0x24>
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	a1 1d       	adc	r26, r1
     cce:	b1 1d       	adc	r27, r1
     cd0:	3f bf       	out	0x3f, r19	; 63
     cd2:	ba 2f       	mov	r27, r26
     cd4:	a9 2f       	mov	r26, r25
     cd6:	98 2f       	mov	r25, r24
     cd8:	88 27       	eor	r24, r24
     cda:	82 0f       	add	r24, r18
     cdc:	91 1d       	adc	r25, r1
     cde:	a1 1d       	adc	r26, r1
     ce0:	b1 1d       	adc	r27, r1
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	42 e0       	ldi	r20, 0x02	; 2
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	88 1f       	adc	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	4a 95       	dec	r20
     cf2:	d1 f7       	brne	.-12     	; 0xce8 <micros+0x3c>
     cf4:	08 95       	ret

00000cf6 <delay>:
     cf6:	8f 92       	push	r8
     cf8:	9f 92       	push	r9
     cfa:	af 92       	push	r10
     cfc:	bf 92       	push	r11
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	6b 01       	movw	r12, r22
     d08:	7c 01       	movw	r14, r24
     d0a:	d0 df       	rcall	.-96     	; 0xcac <micros>
     d0c:	4b 01       	movw	r8, r22
     d0e:	5c 01       	movw	r10, r24
     d10:	c1 14       	cp	r12, r1
     d12:	d1 04       	cpc	r13, r1
     d14:	e1 04       	cpc	r14, r1
     d16:	f1 04       	cpc	r15, r1
     d18:	f1 f0       	breq	.+60     	; 0xd56 <delay+0x60>
     d1a:	88 d0       	rcall	.+272    	; 0xe2c <yield>
     d1c:	c7 df       	rcall	.-114    	; 0xcac <micros>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	88 19       	sub	r24, r8
     d24:	99 09       	sbc	r25, r9
     d26:	aa 09       	sbc	r26, r10
     d28:	bb 09       	sbc	r27, r11
     d2a:	88 3e       	cpi	r24, 0xE8	; 232
     d2c:	93 40       	sbci	r25, 0x03	; 3
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	70 f3       	brcs	.-36     	; 0xd10 <delay+0x1a>
     d34:	21 e0       	ldi	r18, 0x01	; 1
     d36:	c2 1a       	sub	r12, r18
     d38:	d1 08       	sbc	r13, r1
     d3a:	e1 08       	sbc	r14, r1
     d3c:	f1 08       	sbc	r15, r1
     d3e:	88 ee       	ldi	r24, 0xE8	; 232
     d40:	88 0e       	add	r8, r24
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	98 1e       	adc	r9, r24
     d46:	a1 1c       	adc	r10, r1
     d48:	b1 1c       	adc	r11, r1
     d4a:	c1 14       	cp	r12, r1
     d4c:	d1 04       	cpc	r13, r1
     d4e:	e1 04       	cpc	r14, r1
     d50:	f1 04       	cpc	r15, r1
     d52:	21 f7       	brne	.-56     	; 0xd1c <delay+0x26>
     d54:	dd cf       	rjmp	.-70     	; 0xd10 <delay+0x1a>
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	9f 90       	pop	r9
     d64:	8f 90       	pop	r8
     d66:	08 95       	ret

00000d68 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d68:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d6a:	84 b5       	in	r24, 0x24	; 36
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d70:	84 b5       	in	r24, 0x24	; 36
     d72:	81 60       	ori	r24, 0x01	; 1
     d74:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d76:	85 b5       	in	r24, 0x25	; 37
     d78:	82 60       	ori	r24, 0x02	; 2
     d7a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d7c:	85 b5       	in	r24, 0x25	; 37
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d82:	ee e6       	ldi	r30, 0x6E	; 110
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	81 60       	ori	r24, 0x01	; 1
     d8a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d8c:	e1 e8       	ldi	r30, 0x81	; 129
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d92:	80 81       	ld	r24, Z
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d98:	80 81       	ld	r24, Z
     d9a:	81 60       	ori	r24, 0x01	; 1
     d9c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d9e:	e0 e8       	ldi	r30, 0x80	; 128
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	81 60       	ori	r24, 0x01	; 1
     da6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     da8:	e1 eb       	ldi	r30, 0xB1	; 177
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	84 60       	ori	r24, 0x04	; 4
     db0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     db2:	e0 eb       	ldi	r30, 0xB0	; 176
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	81 60       	ori	r24, 0x01	; 1
     dba:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     dbc:	e1 e9       	ldi	r30, 0x91	; 145
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	82 60       	ori	r24, 0x02	; 2
     dc4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     dc6:	80 81       	ld	r24, Z
     dc8:	81 60       	ori	r24, 0x01	; 1
     dca:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     dcc:	e0 e9       	ldi	r30, 0x90	; 144
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	81 60       	ori	r24, 0x01	; 1
     dd4:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     dd6:	e1 ea       	ldi	r30, 0xA1	; 161
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 60       	ori	r24, 0x02	; 2
     dde:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     de0:	80 81       	ld	r24, Z
     de2:	81 60       	ori	r24, 0x01	; 1
     de4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     de6:	e0 ea       	ldi	r30, 0xA0	; 160
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     df0:	e1 e2       	ldi	r30, 0x21	; 33
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	80 81       	ld	r24, Z
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     dfa:	80 81       	ld	r24, Z
     dfc:	81 60       	ori	r24, 0x01	; 1
     dfe:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     e00:	e0 e2       	ldi	r30, 0x20	; 32
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	80 81       	ld	r24, Z
     e06:	81 60       	ori	r24, 0x01	; 1
     e08:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e0a:	ea e7       	ldi	r30, 0x7A	; 122
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	84 60       	ori	r24, 0x04	; 4
     e12:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e14:	80 81       	ld	r24, Z
     e16:	82 60       	ori	r24, 0x02	; 2
     e18:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e1a:	80 81       	ld	r24, Z
     e1c:	81 60       	ori	r24, 0x01	; 1
     e1e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e20:	80 81       	ld	r24, Z
     e22:	80 68       	ori	r24, 0x80	; 128
     e24:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e26:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     e2a:	08 95       	ret

00000e2c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     e2c:	08 95       	ret

00000e2e <__cmpsf2>:
     e2e:	d4 d0       	rcall	.+424    	; 0xfd8 <__fp_cmp>
     e30:	08 f4       	brcc	.+2      	; 0xe34 <__cmpsf2+0x6>
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	08 95       	ret

00000e36 <__divsf3>:
     e36:	0c d0       	rcall	.+24     	; 0xe50 <__divsf3x>
     e38:	e0 ca       	rjmp	.-2624   	; 0x3fa <__fp_round>
     e3a:	d8 da       	rcall	.-2640   	; 0x3ec <__fp_pscB>
     e3c:	40 f0       	brcs	.+16     	; 0xe4e <__divsf3+0x18>
     e3e:	cf da       	rcall	.-2658   	; 0x3de <__fp_pscA>
     e40:	30 f0       	brcs	.+12     	; 0xe4e <__divsf3+0x18>
     e42:	21 f4       	brne	.+8      	; 0xe4c <__divsf3+0x16>
     e44:	5f 3f       	cpi	r21, 0xFF	; 255
     e46:	19 f0       	breq	.+6      	; 0xe4e <__divsf3+0x18>
     e48:	c1 ca       	rjmp	.-2686   	; 0x3cc <__fp_inf>
     e4a:	51 11       	cpse	r21, r1
     e4c:	0a cb       	rjmp	.-2540   	; 0x462 <__fp_szero>
     e4e:	c4 ca       	rjmp	.-2680   	; 0x3d8 <__fp_nan>

00000e50 <__divsf3x>:
     e50:	e5 da       	rcall	.-2614   	; 0x41c <__fp_split3>
     e52:	98 f3       	brcs	.-26     	; 0xe3a <__divsf3+0x4>

00000e54 <__divsf3_pse>:
     e54:	99 23       	and	r25, r25
     e56:	c9 f3       	breq	.-14     	; 0xe4a <__divsf3+0x14>
     e58:	55 23       	and	r21, r21
     e5a:	b1 f3       	breq	.-20     	; 0xe48 <__divsf3+0x12>
     e5c:	95 1b       	sub	r25, r21
     e5e:	55 0b       	sbc	r21, r21
     e60:	bb 27       	eor	r27, r27
     e62:	aa 27       	eor	r26, r26
     e64:	62 17       	cp	r22, r18
     e66:	73 07       	cpc	r23, r19
     e68:	84 07       	cpc	r24, r20
     e6a:	38 f0       	brcs	.+14     	; 0xe7a <__divsf3_pse+0x26>
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	44 1f       	adc	r20, r20
     e76:	aa 1f       	adc	r26, r26
     e78:	a9 f3       	breq	.-22     	; 0xe64 <__divsf3_pse+0x10>
     e7a:	33 d0       	rcall	.+102    	; 0xee2 <__divsf3_pse+0x8e>
     e7c:	0e 2e       	mov	r0, r30
     e7e:	3a f0       	brmi	.+14     	; 0xe8e <__divsf3_pse+0x3a>
     e80:	e0 e8       	ldi	r30, 0x80	; 128
     e82:	30 d0       	rcall	.+96     	; 0xee4 <__divsf3_pse+0x90>
     e84:	91 50       	subi	r25, 0x01	; 1
     e86:	50 40       	sbci	r21, 0x00	; 0
     e88:	e6 95       	lsr	r30
     e8a:	00 1c       	adc	r0, r0
     e8c:	ca f7       	brpl	.-14     	; 0xe80 <__divsf3_pse+0x2c>
     e8e:	29 d0       	rcall	.+82     	; 0xee2 <__divsf3_pse+0x8e>
     e90:	fe 2f       	mov	r31, r30
     e92:	27 d0       	rcall	.+78     	; 0xee2 <__divsf3_pse+0x8e>
     e94:	66 0f       	add	r22, r22
     e96:	77 1f       	adc	r23, r23
     e98:	88 1f       	adc	r24, r24
     e9a:	bb 1f       	adc	r27, r27
     e9c:	26 17       	cp	r18, r22
     e9e:	37 07       	cpc	r19, r23
     ea0:	48 07       	cpc	r20, r24
     ea2:	ab 07       	cpc	r26, r27
     ea4:	b0 e8       	ldi	r27, 0x80	; 128
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__divsf3_pse+0x56>
     ea8:	bb 0b       	sbc	r27, r27
     eaa:	80 2d       	mov	r24, r0
     eac:	bf 01       	movw	r22, r30
     eae:	ff 27       	eor	r31, r31
     eb0:	93 58       	subi	r25, 0x83	; 131
     eb2:	5f 4f       	sbci	r21, 0xFF	; 255
     eb4:	2a f0       	brmi	.+10     	; 0xec0 <__divsf3_pse+0x6c>
     eb6:	9e 3f       	cpi	r25, 0xFE	; 254
     eb8:	51 05       	cpc	r21, r1
     eba:	68 f0       	brcs	.+26     	; 0xed6 <__divsf3_pse+0x82>
     ebc:	87 ca       	rjmp	.-2802   	; 0x3cc <__fp_inf>
     ebe:	d1 ca       	rjmp	.-2654   	; 0x462 <__fp_szero>
     ec0:	5f 3f       	cpi	r21, 0xFF	; 255
     ec2:	ec f3       	brlt	.-6      	; 0xebe <__divsf3_pse+0x6a>
     ec4:	98 3e       	cpi	r25, 0xE8	; 232
     ec6:	dc f3       	brlt	.-10     	; 0xebe <__divsf3_pse+0x6a>
     ec8:	86 95       	lsr	r24
     eca:	77 95       	ror	r23
     ecc:	67 95       	ror	r22
     ece:	b7 95       	ror	r27
     ed0:	f7 95       	ror	r31
     ed2:	9f 5f       	subi	r25, 0xFF	; 255
     ed4:	c9 f7       	brne	.-14     	; 0xec8 <__divsf3_pse+0x74>
     ed6:	88 0f       	add	r24, r24
     ed8:	91 1d       	adc	r25, r1
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	97 f9       	bld	r25, 7
     ee0:	08 95       	ret
     ee2:	e1 e0       	ldi	r30, 0x01	; 1
     ee4:	66 0f       	add	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	88 1f       	adc	r24, r24
     eea:	bb 1f       	adc	r27, r27
     eec:	62 17       	cp	r22, r18
     eee:	73 07       	cpc	r23, r19
     ef0:	84 07       	cpc	r24, r20
     ef2:	ba 07       	cpc	r27, r26
     ef4:	20 f0       	brcs	.+8      	; 0xefe <__divsf3_pse+0xaa>
     ef6:	62 1b       	sub	r22, r18
     ef8:	73 0b       	sbc	r23, r19
     efa:	84 0b       	sbc	r24, r20
     efc:	ba 0b       	sbc	r27, r26
     efe:	ee 1f       	adc	r30, r30
     f00:	88 f7       	brcc	.-30     	; 0xee4 <__divsf3_pse+0x90>
     f02:	e0 95       	com	r30
     f04:	08 95       	ret

00000f06 <__fixunssfsi>:
     f06:	92 da       	rcall	.-2780   	; 0x42c <__fp_splitA>
     f08:	88 f0       	brcs	.+34     	; 0xf2c <__fixunssfsi+0x26>
     f0a:	9f 57       	subi	r25, 0x7F	; 127
     f0c:	90 f0       	brcs	.+36     	; 0xf32 <__fixunssfsi+0x2c>
     f0e:	b9 2f       	mov	r27, r25
     f10:	99 27       	eor	r25, r25
     f12:	b7 51       	subi	r27, 0x17	; 23
     f14:	a0 f0       	brcs	.+40     	; 0xf3e <__fixunssfsi+0x38>
     f16:	d1 f0       	breq	.+52     	; 0xf4c <__fixunssfsi+0x46>
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	1a f0       	brmi	.+6      	; 0xf28 <__fixunssfsi+0x22>
     f22:	ba 95       	dec	r27
     f24:	c9 f7       	brne	.-14     	; 0xf18 <__fixunssfsi+0x12>
     f26:	12 c0       	rjmp	.+36     	; 0xf4c <__fixunssfsi+0x46>
     f28:	b1 30       	cpi	r27, 0x01	; 1
     f2a:	81 f0       	breq	.+32     	; 0xf4c <__fixunssfsi+0x46>
     f2c:	99 da       	rcall	.-2766   	; 0x460 <__fp_zero>
     f2e:	b1 e0       	ldi	r27, 0x01	; 1
     f30:	08 95       	ret
     f32:	96 ca       	rjmp	.-2772   	; 0x460 <__fp_zero>
     f34:	67 2f       	mov	r22, r23
     f36:	78 2f       	mov	r23, r24
     f38:	88 27       	eor	r24, r24
     f3a:	b8 5f       	subi	r27, 0xF8	; 248
     f3c:	39 f0       	breq	.+14     	; 0xf4c <__fixunssfsi+0x46>
     f3e:	b9 3f       	cpi	r27, 0xF9	; 249
     f40:	cc f3       	brlt	.-14     	; 0xf34 <__fixunssfsi+0x2e>
     f42:	86 95       	lsr	r24
     f44:	77 95       	ror	r23
     f46:	67 95       	ror	r22
     f48:	b3 95       	inc	r27
     f4a:	d9 f7       	brne	.-10     	; 0xf42 <__fixunssfsi+0x3c>
     f4c:	3e f4       	brtc	.+14     	; 0xf5c <__fixunssfsi+0x56>
     f4e:	90 95       	com	r25
     f50:	80 95       	com	r24
     f52:	70 95       	com	r23
     f54:	61 95       	neg	r22
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f 4f       	sbci	r24, 0xFF	; 255
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	08 95       	ret

00000f5e <__floatunsisf>:
     f5e:	e8 94       	clt
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <__floatsisf+0x12>

00000f62 <__floatsisf>:
     f62:	97 fb       	bst	r25, 7
     f64:	3e f4       	brtc	.+14     	; 0xf74 <__floatsisf+0x12>
     f66:	90 95       	com	r25
     f68:	80 95       	com	r24
     f6a:	70 95       	com	r23
     f6c:	61 95       	neg	r22
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	99 23       	and	r25, r25
     f76:	a9 f0       	breq	.+42     	; 0xfa2 <__floatsisf+0x40>
     f78:	f9 2f       	mov	r31, r25
     f7a:	96 e9       	ldi	r25, 0x96	; 150
     f7c:	bb 27       	eor	r27, r27
     f7e:	93 95       	inc	r25
     f80:	f6 95       	lsr	r31
     f82:	87 95       	ror	r24
     f84:	77 95       	ror	r23
     f86:	67 95       	ror	r22
     f88:	b7 95       	ror	r27
     f8a:	f1 11       	cpse	r31, r1
     f8c:	f8 cf       	rjmp	.-16     	; 0xf7e <__floatsisf+0x1c>
     f8e:	fa f4       	brpl	.+62     	; 0xfce <__floatsisf+0x6c>
     f90:	bb 0f       	add	r27, r27
     f92:	11 f4       	brne	.+4      	; 0xf98 <__floatsisf+0x36>
     f94:	60 ff       	sbrs	r22, 0
     f96:	1b c0       	rjmp	.+54     	; 0xfce <__floatsisf+0x6c>
     f98:	6f 5f       	subi	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8f 4f       	sbci	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	16 c0       	rjmp	.+44     	; 0xfce <__floatsisf+0x6c>
     fa2:	88 23       	and	r24, r24
     fa4:	11 f0       	breq	.+4      	; 0xfaa <__floatsisf+0x48>
     fa6:	96 e9       	ldi	r25, 0x96	; 150
     fa8:	11 c0       	rjmp	.+34     	; 0xfcc <__floatsisf+0x6a>
     faa:	77 23       	and	r23, r23
     fac:	21 f0       	breq	.+8      	; 0xfb6 <__floatsisf+0x54>
     fae:	9e e8       	ldi	r25, 0x8E	; 142
     fb0:	87 2f       	mov	r24, r23
     fb2:	76 2f       	mov	r23, r22
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <__floatsisf+0x5e>
     fb6:	66 23       	and	r22, r22
     fb8:	71 f0       	breq	.+28     	; 0xfd6 <__floatsisf+0x74>
     fba:	96 e8       	ldi	r25, 0x86	; 134
     fbc:	86 2f       	mov	r24, r22
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	2a f0       	brmi	.+10     	; 0xfce <__floatsisf+0x6c>
     fc4:	9a 95       	dec	r25
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	da f7       	brpl	.-10     	; 0xfc4 <__floatsisf+0x62>
     fce:	88 0f       	add	r24, r24
     fd0:	96 95       	lsr	r25
     fd2:	87 95       	ror	r24
     fd4:	97 f9       	bld	r25, 7
     fd6:	08 95       	ret

00000fd8 <__fp_cmp>:
     fd8:	99 0f       	add	r25, r25
     fda:	00 08       	sbc	r0, r0
     fdc:	55 0f       	add	r21, r21
     fde:	aa 0b       	sbc	r26, r26
     fe0:	e0 e8       	ldi	r30, 0x80	; 128
     fe2:	fe ef       	ldi	r31, 0xFE	; 254
     fe4:	16 16       	cp	r1, r22
     fe6:	17 06       	cpc	r1, r23
     fe8:	e8 07       	cpc	r30, r24
     fea:	f9 07       	cpc	r31, r25
     fec:	c0 f0       	brcs	.+48     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     fee:	12 16       	cp	r1, r18
     ff0:	13 06       	cpc	r1, r19
     ff2:	e4 07       	cpc	r30, r20
     ff4:	f5 07       	cpc	r31, r21
     ff6:	98 f0       	brcs	.+38     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     ff8:	62 1b       	sub	r22, r18
     ffa:	73 0b       	sbc	r23, r19
     ffc:	84 0b       	sbc	r24, r20
     ffe:	95 0b       	sbc	r25, r21
    1000:	39 f4       	brne	.+14     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    1002:	0a 26       	eor	r0, r26
    1004:	61 f0       	breq	.+24     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1006:	23 2b       	or	r18, r19
    1008:	24 2b       	or	r18, r20
    100a:	25 2b       	or	r18, r21
    100c:	21 f4       	brne	.+8      	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    100e:	08 95       	ret
    1010:	0a 26       	eor	r0, r26
    1012:	09 f4       	brne	.+2      	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1014:	a1 40       	sbci	r26, 0x01	; 1
    1016:	a6 95       	lsr	r26
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	81 1d       	adc	r24, r1
    101c:	81 1d       	adc	r24, r1
    101e:	08 95       	ret

00001020 <__gesf2>:
    1020:	db df       	rcall	.-74     	; 0xfd8 <__fp_cmp>
    1022:	08 f4       	brcc	.+2      	; 0x1026 <__gesf2+0x6>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	08 95       	ret

00001028 <__mulsf3>:
    1028:	0b d0       	rcall	.+22     	; 0x1040 <__mulsf3x>
    102a:	e7 c9       	rjmp	.-3122   	; 0x3fa <__fp_round>
    102c:	d8 d9       	rcall	.-3152   	; 0x3de <__fp_pscA>
    102e:	28 f0       	brcs	.+10     	; 0x103a <__mulsf3+0x12>
    1030:	dd d9       	rcall	.-3142   	; 0x3ec <__fp_pscB>
    1032:	18 f0       	brcs	.+6      	; 0x103a <__mulsf3+0x12>
    1034:	95 23       	and	r25, r21
    1036:	09 f0       	breq	.+2      	; 0x103a <__mulsf3+0x12>
    1038:	c9 c9       	rjmp	.-3182   	; 0x3cc <__fp_inf>
    103a:	ce c9       	rjmp	.-3172   	; 0x3d8 <__fp_nan>
    103c:	11 24       	eor	r1, r1
    103e:	11 ca       	rjmp	.-3038   	; 0x462 <__fp_szero>

00001040 <__mulsf3x>:
    1040:	ed d9       	rcall	.-3110   	; 0x41c <__fp_split3>
    1042:	a0 f3       	brcs	.-24     	; 0x102c <__mulsf3+0x4>

00001044 <__mulsf3_pse>:
    1044:	95 9f       	mul	r25, r21
    1046:	d1 f3       	breq	.-12     	; 0x103c <__mulsf3+0x14>
    1048:	95 0f       	add	r25, r21
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	55 1f       	adc	r21, r21
    104e:	62 9f       	mul	r22, r18
    1050:	f0 01       	movw	r30, r0
    1052:	72 9f       	mul	r23, r18
    1054:	bb 27       	eor	r27, r27
    1056:	f0 0d       	add	r31, r0
    1058:	b1 1d       	adc	r27, r1
    105a:	63 9f       	mul	r22, r19
    105c:	aa 27       	eor	r26, r26
    105e:	f0 0d       	add	r31, r0
    1060:	b1 1d       	adc	r27, r1
    1062:	aa 1f       	adc	r26, r26
    1064:	64 9f       	mul	r22, r20
    1066:	66 27       	eor	r22, r22
    1068:	b0 0d       	add	r27, r0
    106a:	a1 1d       	adc	r26, r1
    106c:	66 1f       	adc	r22, r22
    106e:	82 9f       	mul	r24, r18
    1070:	22 27       	eor	r18, r18
    1072:	b0 0d       	add	r27, r0
    1074:	a1 1d       	adc	r26, r1
    1076:	62 1f       	adc	r22, r18
    1078:	73 9f       	mul	r23, r19
    107a:	b0 0d       	add	r27, r0
    107c:	a1 1d       	adc	r26, r1
    107e:	62 1f       	adc	r22, r18
    1080:	83 9f       	mul	r24, r19
    1082:	a0 0d       	add	r26, r0
    1084:	61 1d       	adc	r22, r1
    1086:	22 1f       	adc	r18, r18
    1088:	74 9f       	mul	r23, r20
    108a:	33 27       	eor	r19, r19
    108c:	a0 0d       	add	r26, r0
    108e:	61 1d       	adc	r22, r1
    1090:	23 1f       	adc	r18, r19
    1092:	84 9f       	mul	r24, r20
    1094:	60 0d       	add	r22, r0
    1096:	21 1d       	adc	r18, r1
    1098:	82 2f       	mov	r24, r18
    109a:	76 2f       	mov	r23, r22
    109c:	6a 2f       	mov	r22, r26
    109e:	11 24       	eor	r1, r1
    10a0:	9f 57       	subi	r25, 0x7F	; 127
    10a2:	50 40       	sbci	r21, 0x00	; 0
    10a4:	8a f0       	brmi	.+34     	; 0x10c8 <__mulsf3_pse+0x84>
    10a6:	e1 f0       	breq	.+56     	; 0x10e0 <__mulsf3_pse+0x9c>
    10a8:	88 23       	and	r24, r24
    10aa:	4a f0       	brmi	.+18     	; 0x10be <__mulsf3_pse+0x7a>
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	bb 1f       	adc	r27, r27
    10b2:	66 1f       	adc	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 1f       	adc	r24, r24
    10b8:	91 50       	subi	r25, 0x01	; 1
    10ba:	50 40       	sbci	r21, 0x00	; 0
    10bc:	a9 f7       	brne	.-22     	; 0x10a8 <__mulsf3_pse+0x64>
    10be:	9e 3f       	cpi	r25, 0xFE	; 254
    10c0:	51 05       	cpc	r21, r1
    10c2:	70 f0       	brcs	.+28     	; 0x10e0 <__mulsf3_pse+0x9c>
    10c4:	83 c9       	rjmp	.-3322   	; 0x3cc <__fp_inf>
    10c6:	cd c9       	rjmp	.-3174   	; 0x462 <__fp_szero>
    10c8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ca:	ec f3       	brlt	.-6      	; 0x10c6 <__mulsf3_pse+0x82>
    10cc:	98 3e       	cpi	r25, 0xE8	; 232
    10ce:	dc f3       	brlt	.-10     	; 0x10c6 <__mulsf3_pse+0x82>
    10d0:	86 95       	lsr	r24
    10d2:	77 95       	ror	r23
    10d4:	67 95       	ror	r22
    10d6:	b7 95       	ror	r27
    10d8:	f7 95       	ror	r31
    10da:	e7 95       	ror	r30
    10dc:	9f 5f       	subi	r25, 0xFF	; 255
    10de:	c1 f7       	brne	.-16     	; 0x10d0 <__mulsf3_pse+0x8c>
    10e0:	fe 2b       	or	r31, r30
    10e2:	88 0f       	add	r24, r24
    10e4:	91 1d       	adc	r25, r1
    10e6:	96 95       	lsr	r25
    10e8:	87 95       	ror	r24
    10ea:	97 f9       	bld	r25, 7
    10ec:	08 95       	ret

000010ee <__unordsf2>:
    10ee:	74 df       	rcall	.-280    	; 0xfd8 <__fp_cmp>
    10f0:	88 0b       	sbc	r24, r24
    10f2:	99 0b       	sbc	r25, r25
    10f4:	08 95       	ret

000010f6 <__udivmodsi4>:
    10f6:	a1 e2       	ldi	r26, 0x21	; 33
    10f8:	1a 2e       	mov	r1, r26
    10fa:	aa 1b       	sub	r26, r26
    10fc:	bb 1b       	sub	r27, r27
    10fe:	fd 01       	movw	r30, r26
    1100:	0d c0       	rjmp	.+26     	; 0x111c <__udivmodsi4_ep>

00001102 <__udivmodsi4_loop>:
    1102:	aa 1f       	adc	r26, r26
    1104:	bb 1f       	adc	r27, r27
    1106:	ee 1f       	adc	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	a2 17       	cp	r26, r18
    110c:	b3 07       	cpc	r27, r19
    110e:	e4 07       	cpc	r30, r20
    1110:	f5 07       	cpc	r31, r21
    1112:	20 f0       	brcs	.+8      	; 0x111c <__udivmodsi4_ep>
    1114:	a2 1b       	sub	r26, r18
    1116:	b3 0b       	sbc	r27, r19
    1118:	e4 0b       	sbc	r30, r20
    111a:	f5 0b       	sbc	r31, r21

0000111c <__udivmodsi4_ep>:
    111c:	66 1f       	adc	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	1a 94       	dec	r1
    1126:	69 f7       	brne	.-38     	; 0x1102 <__udivmodsi4_loop>
    1128:	60 95       	com	r22
    112a:	70 95       	com	r23
    112c:	80 95       	com	r24
    112e:	90 95       	com	r25
    1130:	9b 01       	movw	r18, r22
    1132:	ac 01       	movw	r20, r24
    1134:	bd 01       	movw	r22, r26
    1136:	cf 01       	movw	r24, r30
    1138:	08 95       	ret

0000113a <__tablejump2__>:
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	88 1f       	adc	r24, r24
    1140:	8b bf       	out	0x3b, r24	; 59
    1142:	07 90       	elpm	r0, Z+
    1144:	f6 91       	elpm	r31, Z
    1146:	e0 2d       	mov	r30, r0
    1148:	19 94       	eijmp

0000114a <_exit>:
    114a:	f8 94       	cli

0000114c <__stop_program>:
    114c:	ff cf       	rjmp	.-2      	; 0x114c <__stop_program>
